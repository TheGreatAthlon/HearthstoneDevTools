diff --git a/Assembly-CSharp/Accessibility/CollectionManager/AccessibleCollectionManager.cs b/Assembly-CSharp/Accessibility/CollectionManager/AccessibleCollectionManager.cs
index 267b978..74936b3 100644
--- a/Assembly-CSharp/Accessibility/CollectionManager/AccessibleCollectionManager.cs
+++ b/Assembly-CSharp/Accessibility/CollectionManager/AccessibleCollectionManager.cs
@@ -69,6 +69,8 @@ namespace Accessibility
 
         private bool m_justCanceledDisenchantPopup;
 
+        private bool m_isTransitioning;
+
         private static AccessibleCollectionManager s_instance = new AccessibleCollectionManager();
 
         internal static AccessibleCollectionManager Get()
@@ -640,6 +642,10 @@ namespace Accessibility
                     AccessibleInputMgr.ClickLeftMouseButton();
                 }
             }
+            else if (AccessibleKey.SPACE.IsPressed())
+            {
+                OpenSideboard();
+            }
             else
             {
                 HandleEditDeckShortcuts();
@@ -1064,29 +1070,44 @@ namespace Accessibility
 
             var collectionDeckTray = CollectionDeckTray.Get();
             var decksContent = collectionDeckTray.GetDecksContent();
-            var deckName = collectionDeckTray.GetEditingDeckBox().GetDeckNameText().Text;
+            var deckName = !collectionDeckTray.IsSideboardOpen ? collectionDeckTray.GetEditingDeckBox().GetDeckNameText().Text : LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_SIDEBOARD);
 
             //m_editDeckMenu = new AccessibleMenu(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK), null); // TODO: Back from both edit and create new
             m_editDeckMenu = new AccessibleMenu(this, deckName, null); // TODO: Back from both edit and create new
 
             m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_ADD_CARDS_OPTION), EditDeckAddCards);
-            m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_DECK_OPTION), EditDeckSeeDeck);
-            m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_RENAME_DECK_OPTION), EditDeckRenameDeck);
-            m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_COPY_DECK_OPTION), EditDeckCopyDeck);
-            m_editDeckMenu.AddOption(CollectionDeckTray.Get().m_doneButton.GetText(), EditDeckDone);
-
+            if (!collectionDeckTray.IsSideboardOpen)
+            {
+                m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_DECK_OPTION), EditDeckSeeDeck);
+                m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_RENAME_DECK_OPTION), EditDeckRenameDeck);
+                m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_COPY_DECK_OPTION), EditDeckCopyDeck);
+                m_editDeckMenu.AddOption(CollectionDeckTray.Get().m_doneButton.GetText(), EditDeckDone);
+            }
+            else
+            {
+                m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_SIDEBOARD_OPTION), EditDeckSeeDeck);
+                m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_BACK_TO_DECK_OPTION), CloseSideboard);
+            }
             m_editDeckMenu.StartReading();
             m_curState = State.EDIT_DECK_MENU;
 
+            var sideboardContent = collectionDeckTray.GetSideboardCardsContent();
+            sideboardContent.UnregisterCardCountUpdated(OnCardCountUpdated);
+            sideboardContent.RegisterCardCountUpdated(OnCardCountUpdated);
+
             CollectionDeckTray.Get().m_cardsContent.UnregisterCardCountUpdated(OnCardCountUpdated);
             CollectionDeckTray.Get().m_cardsContent.RegisterCardCountUpdated(OnCardCountUpdated);
         }
 
         private void OnCardCountUpdated(int cardCount)
         {
+            if (m_isTransitioning)
+            {
+                return;
+            }
             if (m_curState == State.EDIT_DECK_SEE_DECK || m_curState == State.EDIT_DECK_SEE_COLLECTION)
             {
-                int deckSize = CollectionManager.Get().GetDeckSize();
+                int deckSize = GetDeckSize();
                 AccessibilityMgr.Output(this, LocalizationUtils.Format(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_CARDS_IN_DECK, cardCount, deckSize));
             }
 
@@ -1097,6 +1118,16 @@ namespace Accessibility
             }
         }
 
+        private int GetDeckSize()
+        {
+            var collectionDeckTray = CollectionDeckTray.Get();
+            if (collectionDeckTray.IsSideboardOpen)
+            {
+                return (collectionDeckTray.GetCurrentDeckContext() as SideboardDeck).DataModel.MaxCards;
+            }
+            return CollectionManager.Get().GetDeckSize();
+        }
+
         private void UpdateEditingDeckCardsAfterCardRemoved()
         {
             var numCardsBeforeRemovingCard = m_editingDeckCards.Count;
@@ -1156,7 +1187,7 @@ namespace Accessibility
                 AccessibleInputMgr.HideMouse();
 
                 int cardCount = CountCards(editingDeckCards);
-                int deckSize = CollectionManager.Get().GetDeckSize();
+                int deckSize = GetDeckSize();
                 AccessibilityMgr.Output(this, LocalizationUtils.Format(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_CARDS_IN_DECK, cardCount, deckSize));
 
                 m_editingDeckCards = new AccessibleListOfItems<AccessibleEditingDeckCard>(this, BuildAccessibleEditingDeckCards());
@@ -1194,7 +1225,7 @@ namespace Accessibility
             var ret = new List<DeckTrayDeckTileVisual>();
 
             CollectionDeckTray collectionDeckTray = CollectionDeckTray.Get();
-            var cardTiles = collectionDeckTray.GetCardsContent().GetCardTiles();
+            var cardTiles = collectionDeckTray.GetCurrentCardListContext().GetCardTiles();
 
             foreach (var cardTile in cardTiles)
             {
@@ -1287,6 +1318,33 @@ namespace Accessibility
             }
         }
 
+        private void OpenSideboard()
+        {
+            var curCard = m_editingDeckCards?.GetItemBeingRead()?.GetCardTile();
+            if (curCard?.GetActor().GetEntityDef().HasSideboard ?? false)
+            {
+                m_isTransitioning = true;
+                CollectionDeckTray.Get().OnDeckTileSideboardButtonPressed(curCard.GetActor());
+            }
+        }
+
+        private void CloseSideboard()
+        {
+            var DeckTray = CollectionDeckTray.Get();
+            if (DeckTray.IsSideboardOpen)
+            {
+                m_isTransitioning = true;
+                DeckTray.OnSideboardDoneButtonPressed();
+            }
+        }
+
+        internal void OnSideboardOpenedOrClosed(bool isOpen)
+        {
+            SetupEditDeckMenu();
+            m_isTransitioning = false;
+        }
+
+
         private void SetupCraftingMenu(bool forceHideMassDisenchantButton = false)
         {
             AccessibleInputMgr.HideMouse();
diff --git a/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs b/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs
index bc79162..c82edb0 100644
--- a/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs
+++ b/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs
@@ -763,8 +763,11 @@ public class LocalizationKey
     public static LocalizationKey SCREEN_COLLECTION_MANAGER_CUSTOM_DECK_CHOOSE_HELP = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_CUSTOM_DECK_CHOOSE_HELP");
     public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_ADD_CARDS_OPTION = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_ADD_CARDS_OPTION");
     public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_DECK_OPTION = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_DECK_OPTION");
+    public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_SIDEBOARD_OPTION = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_SIDEBOARD_OPTION");
+    public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_BACK_TO_DECK_OPTION = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_BACK_TO_DECK_OPTION");
     public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_DECK_OPTION_EMPTY_DECK = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_DECK_OPTION_EMPTY_DECK");
     public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_INVALID_CARD = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_EDIT_DECK_INVALID_CARD");
+    public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_SIDEBOARD = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_EDIT_DECK_SIDEBOARD");
     public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_RENAME_DECK_OPTION = CreateKey("GLUE_COLLECTION_DECK_RENAME");
     public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_COPY_DECK_OPTION = CreateKey("GLUE_COLLECTION_DECK_COPY_TOOLTIP_HEADLINE");
     public static LocalizationKey SCREEN_COLLECTION_MANAGER_EDIT_DECK_CARDS_IN_DECK = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_EDIT_DECK_CARDS_IN_DECK");
@@ -994,6 +997,9 @@ public class LocalizationKey
     public static LocalizationKey IN_GAME_TUTORIAL_MULLIGAN_FIRST_TIME_D = CreateKey("ACCESSIBILITY_IN_GAME_TUTORIAL_MULLIGAN_FIRST_TIME_D");
     public static LocalizationKey IN_GAME_TUTORIAL_MULLIGAN_FIRST_TIME_E = CreateKey("ACCESSIBILITY_IN_GAME_TUTORIAL_MULLIGAN_FIRST_TIME_E");
 
+    // Tutorials in the collection manager. Currently just E.T.C.
+    public static LocalizationKey SCREEN_COLLECTION_MANAGER_ETC_TUTORIAL = CreateKey("ACCESSIBILITY_SCREEN_COLLECTION_MANAGER_ETC_TUTORIAL");
+
     // Battlegrounds tutorial
     public static LocalizationKey BATTLEGROUNDS_TUTORIAL_DRAGBUY_TUTORIAL_OVERRIDE = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_TUTORIAL_DRAGBUY_TUTORIAL_OVERRIDE");
     public static LocalizationKey BATTLEGROUNDS_TUTORIAL_DRAGBUY_BODY_TUTORIAL_OVERRIDE = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_TUTORIAL_DRAGBUY_BODY_TUTORIAL_OVERRIDE");
diff --git a/Assembly-CSharp/CollectionDeckTray.cs b/Assembly-CSharp/CollectionDeckTray.cs
index 7bb594b..8096b04 100644
--- a/Assembly-CSharp/CollectionDeckTray.cs
+++ b/Assembly-CSharp/CollectionDeckTray.cs
@@ -316,7 +316,7 @@ public class CollectionDeckTray : EditableDeckTray
 		DeckTrayCardListContent.DoneButtonPressed -= OnSideboardDoneButtonPressed;
 	}
 
-	private void OnSideboardDoneButtonPressed()
+	internal void OnSideboardDoneButtonPressed()
 	{
 		m_sideboardTray.Hide();
 		CollectionManager.Get().GetCollectibleDisplay().UpdateCurrentPageCardLocks(playSound: true);
@@ -324,9 +324,10 @@ public class CollectionDeckTray : EditableDeckTray
 		{
 			m_scrollbar.EnableIfNeeded();
 		}
+		AccessibleCollectionManager.Get().OnSideboardOpenedOrClosed(false);
 	}
 
-	private void OnDeckTileSideboardButtonPressed(CollectionDeckTileActor deckTile)
+	internal void OnDeckTileSideboardButtonPressed(CollectionDeckTileActor deckTile)
 	{
 		if (!m_sideboardTray)
 		{
@@ -343,6 +344,7 @@ public class CollectionDeckTray : EditableDeckTray
 			{
 				m_scrollbar.Enable(enable: false);
 			}
+			AccessibleCollectionManager.Get().OnSideboardOpenedOrClosed(true);
 		}
 	}
 
@@ -477,6 +479,7 @@ public class CollectionDeckTray : EditableDeckTray
 			m_sideboardCardPopup = notificationManager.CreatePopupText(UserAttentionBlocker.NONE, position, SideboardPopupScale * Vector3.one, GameStrings.Get("GLUE_ETC_FTUE_SIDEBOARD"));
 			m_sideboardCardPopup.ShowPopUpArrow(Notification.PopUpArrowDirection.Right);
 			NotificationManager.Get().DestroyNotification(m_sideboardCardPopup, SideboardPopupDelay);
+			AccessibilityMgr.Output(null, LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_ETC_TUTORIAL));
 		}
 	}
 
