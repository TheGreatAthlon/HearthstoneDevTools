diff --git a/Assembly-CSharp/Accessibility/AccessibilityUtils.cs b/Assembly-CSharp/Accessibility/AccessibilityUtils.cs
index e34f3f4..13edcf3 100644
--- a/Assembly-CSharp/Accessibility/AccessibilityUtils.cs
+++ b/Assembly-CSharp/Accessibility/AccessibilityUtils.cs
@@ -409,6 +409,8 @@ namespace Accessibility
                 case PegasusShared.GameType.GT_TAVERNBRAWL:
                 case PegasusShared.GameType.GT_BATTLEGROUNDS:
                 case PegasusShared.GameType.GT_BATTLEGROUNDS_FRIENDLY:
+                case PegasusShared.GameType.GT_PVPDR:
+                case PegasusShared.GameType.GT_PVPDR_PAID:
                     return true;
                 default:
                     return false;
diff --git a/Assembly-CSharp/Accessibility/AccessibleGameModeScene.cs b/Assembly-CSharp/Accessibility/AccessibleGameModeScene.cs
index 538ff3c..e0e755d 100644
--- a/Assembly-CSharp/Accessibility/AccessibleGameModeScene.cs
+++ b/Assembly-CSharp/Accessibility/AccessibleGameModeScene.cs
@@ -40,8 +40,10 @@ namespace Accessibility
         private void SetupMainMenu()
         {
             m_mainMenu = new AccessibleMenu(this, LocalizationUtils.Get(LocalizationKey.GLOBAL_CHOOSE_MODE), OnClickBackButton);
-            m_mainMenu.AddOption(LocalizedText.MODES_ARENA_OPTION, OnClickArena);
-            m_mainMenu.AddOption(LocalizedText.MODES_SOLO_ADVENTURES_OPTION, OnClickSoloAdventures);
+            m_mainMenu.AddOption(GameStrings.Get("GLUE_RECONNECT_GAME_TYPE_ARENA"), OnClickArena);
+            m_mainMenu.AddOption(GameStrings.Get("GLUE_PVPDR"), OnClickDuels);
+            m_mainMenu.AddOption(GameStrings.Get("GLUE_ADVENTURE"), OnClickSoloAdventures);
+            //m_mainMenu.AddOption(GameStrings.Get("GLUE_RECONNECT_GAME_TYPE_TAVERN_BRAWL"), OnClickTavern); // todo implement game mode
             m_mainMenu.AddOption(LocalizedText.SCREEN_GO_BACK, OnClickBackButton);
 
             m_curState = State.MAIN_MENU;
@@ -77,6 +79,33 @@ namespace Accessibility
             GameModeDisplay.Get().SelectMode(arenaButton);
             GameModeDisplay.Get().m_playButton.TriggerRelease();
         }
+
+        private void OnClickDuels()
+        {
+            var duelsButton = GetDuelsButton();
+
+            if (duelsButton == null)
+            {
+                AccessibilityUtils.LogFatalError(new Exception("Could not find duels button"));
+            }
+
+            GameModeDisplay.Get().SelectMode(duelsButton);
+            GameModeDisplay.Get().m_playButton.TriggerRelease();
+        }
+
+        private void OnClickTavern()
+        {
+            var tavernButton = GetTavernButton();
+
+            if (tavernButton == null)
+            {
+                AccessibilityUtils.LogFatalError(new Exception("Could not find tavern brawl button"));
+            }
+
+            GameModeDisplay.Get().SelectMode(tavernButton);
+            GameModeDisplay.Get().m_playButton.TriggerRelease();
+        }
+
         private GameModeButtonDataModel GetSoloAdventuresButton()
         {
             foreach (var button in m_gameModeSceneDataModel.GameModeButtons)
@@ -103,6 +132,32 @@ namespace Accessibility
             return null;
         }
 
+        private GameModeButtonDataModel GetDuelsButton()
+        {
+            foreach (var button in m_gameModeSceneDataModel.GameModeButtons)
+            {
+                if (button.GameModeRecordId == 3)
+                {
+                    return button;
+                }
+            }
+
+            return null;
+        }
+
+        private GameModeButtonDataModel GetTavernButton()
+        {
+            foreach (var button in m_gameModeSceneDataModel.GameModeButtons)
+            {
+                if (button.GameModeRecordId == 8)
+                {
+                    return button;
+                }
+            }
+
+            return null;
+        }
+
         public void HandleInput()
         {
             if (m_curState == State.MAIN_MENU)
diff --git a/Assembly-CSharp/Accessibility/AccessibleKey.cs b/Assembly-CSharp/Accessibility/AccessibleKey.cs
index 04198ba..2c89513 100644
--- a/Assembly-CSharp/Accessibility/AccessibleKey.cs
+++ b/Assembly-CSharp/Accessibility/AccessibleKey.cs
@@ -133,6 +133,14 @@ namespace Accessibility
         public static AccessibleKey DEV_2 = CreateKey(KeyCode.Alpha2);
         #endregion
 
+        #region duels
+        public static AccessibleKey READ_DECK = CreateKey(KeyCode.D);
+        public static AccessibleKey READ_LOOT_FORWARDS = CreateKey(KeyCode.Tab, false);
+        public static AccessibleKey READ_LOOT_BACKWARDS = CreateKey(KeyCode.Tab, true);
+        public static AccessibleKey TAKE_LOOT = CreateKey(KeyCode.Return);
+        public static AccessibleKey TAKE_LOOT_ALT = CreateKey(KeyCode.KeypadEnter);
+        #endregion
+
         private bool m_requiresShift;
 
         private bool m_requiresCtrl;
diff --git a/Assembly-CSharp/Accessibility/CollectionManager/AccessibleCollectionManager.cs b/Assembly-CSharp/Accessibility/CollectionManager/AccessibleCollectionManager.cs
index 61b2948..5dab6ff 100644
--- a/Assembly-CSharp/Accessibility/CollectionManager/AccessibleCollectionManager.cs
+++ b/Assembly-CSharp/Accessibility/CollectionManager/AccessibleCollectionManager.cs
@@ -4,8 +4,17 @@ using UnityEngine;
 
 namespace Accessibility
 {
-    class AccessibleCollectionManager : AccessibleScreen
+    class AccessibleCollectionManager : AccessibleScreen, AccessibleUI
     {
+        private enum Mode
+        {
+            INVALID,
+            TRADITIONAL,
+            EMBEDDED,
+            BACON, // TODO
+            LETTUCE // TODO
+        }
+
         private enum State
         {
             LOADING,
@@ -33,6 +42,8 @@ namespace Accessibility
 
         private State m_curState;
 
+        private Mode m_curMode;
+
         private AccessibleMenu m_mainMenu;
 
         private AccessibleMenu m_browseCollectionMenu;
@@ -71,6 +82,8 @@ namespace Accessibility
 
         private bool m_isTransitioning;
 
+        internal bool m_willEditDeck;
+
         private static AccessibleCollectionManager s_instance = new AccessibleCollectionManager();
 
         internal static AccessibleCollectionManager Get()
@@ -80,7 +93,8 @@ namespace Accessibility
 
         internal void OnCollectionManagerOpened()
         {
-            if (!IsSupportedCollectionManager())
+            SetMode();
+            if (m_curMode != Mode.TRADITIONAL && m_curMode != Mode.EMBEDDED)
             {
                 return;
             }
@@ -89,15 +103,36 @@ namespace Accessibility
             m_stateBeforeViewCard = State.LOADING;
             m_waitingForServerResponse = false;
             m_justCanceledDisenchantPopup = false;
+            m_willEditDeck = false;
 
             AccessibilityUtils.LogDebug("CM OnCollectionManagerOpened");
-            AccessibilityMgr.SetScreen(this);
+            if (m_curMode == Mode.TRADITIONAL)
+            {
+                AccessibilityMgr.SetScreen(this);
+            }
         }
 
-        private bool IsSupportedCollectionManager()
+        private void SetMode()
         {
-            // BG and Mercenaries CMs are not supported - break so players using OCR or being helped by sighted players can still access them if they'd like
-            return SceneMgr.Get().GetMode() == SceneMgr.Mode.COLLECTIONMANAGER;
+            switch (SceneMgr.Get().GetMode())
+            {
+                case SceneMgr.Mode.COLLECTIONMANAGER:
+                m_curMode = Mode.TRADITIONAL;
+                break;
+                case SceneMgr.Mode.TAVERN_BRAWL:
+                case SceneMgr.Mode.PVP_DUNGEON_RUN:
+                m_curMode = Mode.EMBEDDED;
+                break;
+                case SceneMgr.Mode.BACON_COLLECTION:
+                m_curMode = Mode.BACON;
+                break;
+                case SceneMgr.Mode.LETTUCE_COLLECTION:
+                m_curMode = Mode.LETTUCE;
+                break;
+                default:
+                m_curMode = Mode.INVALID;
+                break;
+            }
         }
 
         private void HandlePageInput()
@@ -158,7 +193,7 @@ namespace Accessibility
 
         internal void OnCancelDisenchantPopup()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -168,7 +203,7 @@ namespace Accessibility
 
         internal void OnPageChanged<TCollectible>(int curPageNum, ICollection<TCollectible> collectiblesToDisplay, List<CollectionCardActors> cardActors) where TCollectible : ICollectible
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL && m_curMode != Mode.EMBEDDED)
             {
                 return;
             }
@@ -250,7 +285,7 @@ namespace Accessibility
 
         internal void OnCardBacksPageChanged(int curPageNum, List<CollectionCardActors> cardActors)
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -293,7 +328,7 @@ namespace Accessibility
 
         internal void OnShowNoMatchesFound(string key)
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL && m_curMode != Mode.EMBEDDED)
             {
                 return;
             }
@@ -341,7 +376,7 @@ namespace Accessibility
 
         internal void OnCollectionManagerClosed()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -352,20 +387,18 @@ namespace Accessibility
 
         internal void OnCollectibleDisplayReady()
         {
-            if (!IsSupportedCollectionManager())
-            {
-                return;
-            }
-
             AccessibilityUtils.LogDebug("CM OnCollectibleDisplayReady");
             AccessibilityUtils.LogDebug($"{SceneMgr.Get().GetMode()}");
 
-            SetupMainMenu();
+            if (m_curMode == Mode.TRADITIONAL)
+            {
+                SetupMainMenu();
+            }
         }
 
         internal void OnChangeViewMode(CollectionUtils.ViewMode prevMode, CollectionUtils.ViewMode curMode)
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -380,11 +413,6 @@ namespace Accessibility
 
         public void HandleInput()
         {
-            if (!IsSupportedCollectionManager())
-            {
-                return;
-            }
-
             switch (m_curState)
             {
                 case State.BROWSING_CARDS:
@@ -698,7 +726,7 @@ namespace Accessibility
 
         internal void OnSelectFilterItem()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1032,7 +1060,7 @@ namespace Accessibility
 
         internal void OnFinishRenamingDeck()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1079,9 +1107,11 @@ namespace Accessibility
             if (!collectionDeckTray.IsSideboardOpen)
             {
                 m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_SEE_DECK_OPTION), EditDeckSeeDeck);
-                m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_RENAME_DECK_OPTION), EditDeckRenameDeck);
+                if (m_curMode == Mode.TRADITIONAL)
+                    m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_RENAME_DECK_OPTION), EditDeckRenameDeck);
                 m_editDeckMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_COLLECTION_MANAGER_EDIT_DECK_MENU_COPY_DECK_OPTION), EditDeckCopyDeck);
-                m_editDeckMenu.AddOption(decksContent.m_deckOptionsMenu.m_convertText.Text, decksContent.m_deckOptionsMenu.m_switchFormatButton.TriggerRelease);
+                if (m_curMode == Mode.TRADITIONAL)
+                    m_editDeckMenu.AddOption(decksContent.m_deckOptionsMenu.m_convertText.Text, decksContent.m_deckOptionsMenu.m_switchFormatButton.TriggerRelease);
                 m_editDeckMenu.AddOption(CollectionDeckTray.Get().m_doneButton.GetText(), EditDeckDone);
             }
             else
@@ -1262,29 +1292,45 @@ namespace Accessibility
 
         private void EditDeckDone()
         {
-            CollectionManager.Get().RegisterEditedDeckChanged(OnEditedDeckDone);
             CollectionDeckTray.Get().m_doneButton.TriggerRelease();
         }
 
         private void EditDeck(CollectionDeckBoxVisual deckBox)
         {
-            CollectionManager.Get().RegisterEditedDeckChanged(OnEditedDeckChanged);
+            PrepareToEditDeck();
             AccessibleInputMgr.Click(deckBox.transform);
         }
 
-        private void OnEditedDeckChanged(CollectionDeck newDeck, CollectionDeck oldDeck, object callbackData)
+        internal void PrepareToEditDeck()
         {
-            AccessibilityUtils.LogDebug("CM OnEditDeckChanged");
-            CollectionManager.Get().RemoveEditedDeckChanged(OnEditedDeckChanged);
-            SetupEditDeckMenu();
+            m_willEditDeck = true;
         }
 
-        private void OnEditedDeckDone(CollectionDeck newDeck, CollectionDeck oldDeck, object callbackData)
+        internal void OnStartEditingDeck()
         {
-            AccessibilityUtils.LogDebug("CM OnEditDeckDone");
-            CollectionManager.Get().RemoveEditedDeckChanged(OnEditedDeckDone);
+            m_willEditDeck = false;
+            if (m_curMode == Mode.EMBEDDED)
+            {
+                AccessibilityMgr.ShowUI(this);
+            }
+            SetupEditDeckMenu();
+        }
 
-            SetupMainMenu();
+        internal void OnDoneEditingDeck()
+        {
+            if (m_curState != State.EDIT_DECK_MENU && m_curState != State.EDIT_DECK_SEE_COLLECTION && m_curState != State.EDIT_DECK_SEE_DECK)
+            {
+                return;
+            }
+            m_willEditDeck = false;
+            if (m_curMode == Mode.EMBEDDED)
+            {
+                AccessibilityMgr.HideUI(this);
+            }
+            else
+            {
+                ReadMainMenu();
+            }
         }
 
         private void OnNewDeck()
@@ -1316,7 +1362,7 @@ namespace Accessibility
 
         internal void OnEditDeckScreen()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL && m_curMode != Mode.EMBEDDED)
             {
                 return;
             }
@@ -1430,7 +1476,7 @@ namespace Accessibility
 
         internal void OnCraftingTrayOpened()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1440,7 +1486,7 @@ namespace Accessibility
 
         internal void OnCraftingTrayClosed()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1450,7 +1496,7 @@ namespace Accessibility
 
         internal void OnEnterCraftMode(EntityDef cardBeingRead, TAG_PREMIUM cardBeingReadPremium, CardInfoPane cardInfoPane, CraftingUI craftingUI)
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1600,7 +1646,7 @@ namespace Accessibility
 
         internal void OnCancelCraftMode(CardInfoPane cardInfoPane, CraftingUI craftingUI)
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1613,7 +1659,7 @@ namespace Accessibility
 
         internal void OnCreateAnimStarted()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1623,7 +1669,7 @@ namespace Accessibility
 
         internal void OnCreateAnimDone()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1633,7 +1679,7 @@ namespace Accessibility
 
         internal void OnDisenchantAnimStarted()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1643,7 +1689,7 @@ namespace Accessibility
 
         internal void OnDisenchantAnimDone()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1659,7 +1705,7 @@ namespace Accessibility
 
         internal void OnMassDisenchantAnimStarted()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1670,7 +1716,7 @@ namespace Accessibility
 
         internal void OnMassDisenchantAnimDone()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1685,7 +1731,7 @@ namespace Accessibility
 
         internal void OnCardCreated()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1698,7 +1744,7 @@ namespace Accessibility
 
         internal void OnCardDisenchanted()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1738,7 +1784,7 @@ namespace Accessibility
 
         public void OnGainedFocus()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1799,11 +1845,6 @@ namespace Accessibility
 
         public string GetHelp()
         {
-            if (!IsSupportedCollectionManager())
-            {
-                return "";
-            }
-
             switch (m_curState)
             {
                 case State.MAIN_MENU:
@@ -1851,7 +1892,7 @@ namespace Accessibility
 
         internal void OnFinishingDeckAutoFill()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL && m_curMode != Mode.EMBEDDED)
             {
                 return;
             }
@@ -1891,7 +1932,7 @@ namespace Accessibility
 
         internal void OnDeleteDeckCanceled()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1934,7 +1975,7 @@ namespace Accessibility
 
         internal void OnCreateDeckFromClipboard()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL && m_curMode != Mode.EMBEDDED)
             {
                 return;
             }
@@ -1944,7 +1985,7 @@ namespace Accessibility
 
         internal void OnFinishAutoAddCardsWithTiming()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL && m_curMode != Mode.EMBEDDED)
             {
                 return;
             }
@@ -1958,7 +1999,7 @@ namespace Accessibility
 
         internal bool IsCreatingDeckFromClipboard()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL && m_curMode != Mode.EMBEDDED)
             {
                 return false;
             }
@@ -1970,7 +2011,7 @@ namespace Accessibility
 
         internal void OnFavoriteHeroSkinChanged()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -1981,7 +2022,7 @@ namespace Accessibility
 
         internal void OnFavoriteCardBackChanged(bool isFavorite)
         {
-            if (!IsSupportedCollectionManager() || !isFavorite) // Signal on favorite=true only
+            if (m_curMode != Mode.TRADITIONAL || !isFavorite) // Signal on favorite=true only
             {
                 return;
             }
@@ -1992,7 +2033,7 @@ namespace Accessibility
 
         internal void OnFavoriteCoinChanged()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -2005,7 +2046,7 @@ namespace Accessibility
 
         internal void WaitingForServerResponse()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -2028,7 +2069,7 @@ namespace Accessibility
 
         internal void OnBrowsingHeroSkinClasses()
         {
-            if (!IsSupportedCollectionManager())
+            if (m_curMode != Mode.TRADITIONAL)
             {
                 return;
             }
@@ -2046,5 +2087,15 @@ namespace Accessibility
 
             m_curState = State.BROWSING_HERO_SKIN_CLASSES;
         }
+
+        public void HandleAccessibleInput()
+        {
+            HandleInput();
+        }
+
+        public string GetAccessibleHelp()
+        {
+            return GetHelp();
+        }
     }
 }
diff --git a/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs b/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs
index 7356dda..4a3bd19 100644
--- a/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs
+++ b/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs
@@ -39,17 +39,17 @@ public class LocalizationKey
     public static LocalizationKey SOUND_OPTIONS_MENU_SOUND_IN_BACKGROUND_OPTION = CreateKey("GLOBAL_OPTIONS_SOUND_IN_BACKGROUND");
     public static LocalizationKey SOUND_OPTIONS_MENU_RESET_DEFAULTS_OPTION = CreateKey("GLOBAL_OPTIONS_SOUND_RESET_DEFAULTS");
     public static LocalizationKey OPTIONS_MENU_FULLSCREEN_OPTION = CreateKey("GLOBAL_OPTIONS_GRAPHICS_FULLSCREEN_LABEL");
-        public static LocalizationKey OPTIONS_MENU_SPEECH_IN_BACKGROUND_OPTION = CreateKey("ACCESSIBILITY_OPTIONS_MENU_SPEECH_IN_BACKGROUND_OPTION");
+    public static LocalizationKey OPTIONS_MENU_SPEECH_IN_BACKGROUND_OPTION = CreateKey("ACCESSIBILITY_OPTIONS_MENU_SPEECH_IN_BACKGROUND_OPTION");
     public static LocalizationKey OPTIONS_MENU_ALLOW_SPECTATORS_OPTION = CreateKey("GLOBAL_OPTIONS_SPECTATOR_OPEN_JOIN");
     public static LocalizationKey OPTIONS_MENU_ENABLE_SCREEN_SHAKE_OPTION = CreateKey("GLOBAL_OPTIONS_SCREEN_SHAKE");
     public static LocalizationKey OPTIONS_MENU_ADJUST_VOLUME = CreateKey("ACCESSIBILITY_OPTIONS_MENU_ADJUST_VOLUME");
     public static LocalizationKey OPTIONS_MENU_CHECKBOX_LABEL = CreateKey("ACCESSIBILITY_OPTIONS_MENU_CHECKBOX_LABEL");
     public static LocalizationKey OPTIONS_MENU_CHECKBOX_CHECKED = CreateKey("ACCESSIBILITY_OPTIONS_MENU_CHECKBOX_CHECKED");
     public static LocalizationKey OPTIONS_MENU_CHECKBOX_NOT_CHECKED = CreateKey("ACCESSIBILITY_OPTIONS_MENU_CHECKBOX_NOT_CHECKED");
-public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED");
-public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_SLOW = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED_SLOW");
-public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_MEDIUM = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED_MEDIUM");
-public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST");
+    public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED");
+    public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_SLOW = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED_SLOW");
+    public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_MEDIUM = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED_MEDIUM");
+    public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST");
 
     // Hub
     public static LocalizationKey HUB_MAIN_MENU_TITLE = CreateKey("ACCESSIBILITY_HUB_MAIN_MENU_TITLE");
@@ -59,7 +59,9 @@ public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST = CreateKey("A
 
     // Global
     public static LocalizationKey GLOBAL_SOLO_ADVENTURES = CreateKey("GLUE_ADVENTURE");
-        public static LocalizationKey GLOBAL_ARENA    = CreateKey("ACCESSIBILITY_MODES_ARENA");
+    public static LocalizationKey GLOBAL_ARENA    = CreateKey("ACCESSIBILITY_MODES_ARENA");
+    public static LocalizationKey GLOBAL_DUELS    = CreateKey("ACCESSIBILITY_MODES_DUELS");
+    public static LocalizationKey GLOBAL_TAVERN    = CreateKey("ACCESSIBILITY_MODES_TAVERN");
     public static LocalizationKey GLOBAL_BATTLEGROUNDS = CreateKey("GLUE_BACON");
     public static LocalizationKey GLOBAL_GAME_MODES = CreateKey("GLUE_GAME_MODES");
     public static LocalizationKey GLOBAL_CHOOSE_MODE = CreateKey("GLUE_GAME_MODES_POPUP_HEADER");
@@ -304,7 +306,7 @@ public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST = CreateKey("A
     public static LocalizationKey GAMEPLAY_DIFF_ENTITY_BECAME_SILENCED = CreateKey("ACCESSIBILITY_GAMEPLAY_DIFF_ENTITY_BECAME_SILENCED");
     public static LocalizationKey GAMEPLAY_DIFF_MULTIPLE_ENTITIES_BECAME_SILENCED = CreateKey("ACCESSIBILITY_GAMEPLAY_DIFF_MULTIPLE_ENTITIES_BECAME_SILENCED");
     public static LocalizationKey GAMEPLAY_DIFF_ENTITY_BECAME_DORMANT = CreateKey("ACCESSIBILITY_GAMEPLAY_DIFF_ENTITY_BECAME_DORMANT");
-        public static LocalizationKey GAMEPLAY_DIFF_ENTITY_WAS_HAUNTED = CreateKey("ACCESSIBILITY_GAMEPLAY_DIFF_ENTITY_WAS_HAUNTED");
+    public static LocalizationKey GAMEPLAY_DIFF_ENTITY_WAS_HAUNTED = CreateKey("ACCESSIBILITY_GAMEPLAY_DIFF_ENTITY_WAS_HAUNTED");
     public static LocalizationKey GAMEPLAY_DIFF_MULTIPLE_ENTITIES_WERE_HAUNTED = CreateKey("ACCESSIBILITY_GAMEPLAY_DIFF_MULTIPLE_ENTITIES_WERE_HAUNTED");
 
     public static LocalizationKey GAMEPLAY_DIFF_MULTIPLE_ENTITIES_BECAME_DORMANT = CreateKey("ACCESSIBILITY_GAMEPLAY_DIFF_MULTIPLE_ENTITIES_BECAME_DORMANT");
@@ -468,11 +470,11 @@ public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST = CreateKey("A
 
     // Battlegrounds
     public static LocalizationKey BATTLEGROUNDS_GAMEPLAY_READ_CARD_TIER = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_GAMEPLAY_READ_CARD_TIER");
-        public static LocalizationKey BATTLEGROUNDS_PARTY_PLAYER_JOINED = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_PARTY_PLAYER_JOINED");
-                public static LocalizationKey BATTLEGROUNDS_PARTY_PLAYER_DECLINED_INVITE = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_PARTY_PLAYER_DECLINED_INVITE");
-                        public static LocalizationKey BATTLEGROUNDS_PARTY_PLAYER_LEFT = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_PARTY_PLAYER_LEFT");
+    public static LocalizationKey BATTLEGROUNDS_PARTY_PLAYER_JOINED = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_PARTY_PLAYER_JOINED");
+     public static LocalizationKey BATTLEGROUNDS_PARTY_PLAYER_DECLINED_INVITE = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_PARTY_PLAYER_DECLINED_INVITE");
+     public static LocalizationKey BATTLEGROUNDS_PARTY_PLAYER_LEFT = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_PARTY_PLAYER_LEFT");
     public static LocalizationKey BATTLEGROUNDS_GAMEPLAY_READ_CARD_COST = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_GAMEPLAY_READ_CARD_COST");
-        public static LocalizationKey BATTLEGROUNDS_GAMEPLAY_DARKMOON_TICKET = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_GAMEPLAY_DARKMOON_TICKET");
+    public static LocalizationKey BATTLEGROUNDS_GAMEPLAY_DARKMOON_TICKET = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_GAMEPLAY_DARKMOON_TICKET");
     public static LocalizationKey BATTLEGROUNDS_GAMEPLAY_READ_CARD_PREMIUM_GOLDEN = CreateKey("GLUE_MASS_DISENCHANT_PREMIUM_TITLE");
     public static LocalizationKey BATTLEGROUNDS_GAMEPLAY_RECRUIT_PHASE = CreateKey("GLUE_BACON_INFO_POPUP_RECRUIT");
     public static LocalizationKey BATTLEGROUNDS_GAMEPLAY_COMBAT_PHASE = CreateKey("GLUE_BACON_INFO_POPUP_COMBAT");
@@ -839,6 +841,11 @@ public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST = CreateKey("A
     public static LocalizationKey SCREEN_BATTLEGROUNDS_PARTY_MEMBER_NOT_READY = CreateKey("ACCESSIBILITY_SCREEN_BATTLEGROUNDS_PARTY_MEMBER_NOT_READY");
     public static LocalizationKey SCREEN_BATTLEGROUNDS_PARTY_MEMBER_SPECTATE = CreateKey("ACCESSIBILITY_SCREEN_BATTLEGROUNDS_PARTY_MEMBER_SPECTATE");
 
+    // Duels main menu
+    public static LocalizationKey SCREEN_DUELS_READ_STATS = CreateKey("ACCESSIBILITY_DUELS_READ_STATS");
+    public static LocalizationKey SCREEN_DUELS_CHOOSE_TYPE = CreateKey("ACCESSIBILITY_DUELS_CHOOSE_TYPE");
+    public static LocalizationKey SCREEN_DUELS_LOSSES_COUNT = CreateKey("ACCESSIBILITY_DUELS_LOSSES_COUNT");
+
     // Quest progress toast
     public static LocalizationKey TOAST_QUEST_PROGRESS_TOAST_TITLE = CreateKey("ACCESSIBILITY_TOAST_QUEST_PROGRESS_TOAST_TITLE");
     public static LocalizationKey TOAST_QUEST_PROGRESS_TOAST_PROGRESS = CreateKey("ACCESSIBILITY_TOAST_QUEST_PROGRESS_TOAST_PROGRESS");
@@ -1027,25 +1034,26 @@ public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST = CreateKey("A
     public static LocalizationKey BATTLEGROUNDS_TUTORIAL_SUMMON_MINION_HELP = CreateKey("ACCESSIBILITY_BATTLEGROUNDS_TUTORIAL_SUMMON_MINION_HELP");
 
     //arena
-        public static LocalizationKey ARENA_DRAFT_SWITCH_HELP = CreateKey("ACCESSIBILITY_ARENA_DRAFT_SWITCH_HELP");
-                public static LocalizationKey ARENA_WINS_LOSSES = CreateKey("ACCESSIBILITY_ARENA_WINS_LOSSES");
-                public static LocalizationKey ARENA_TICKETS_COUNT = CreateKey("ACCESSIBILITY_ARENA_TICKETS_COUNT");
-
-//journal
-                public static LocalizationKey ACHIEVEMENT_CATEGORY_TITLE = CreateKey("ACCESSIBILITY_ACHIEVEMENT_CATEGORY_TITLE");
-                                public static LocalizationKey ACHIEVEMENT_CATEGORY_RECENT = CreateKey("ACCESSIBILITY_ACHIEVEMENT_CATEGORY_RECENT");
-                public static LocalizationKey ACHIEVEMENT_CATEGORY_ITEM = CreateKey("ACCESSIBILITY_ACHIEVEMENT_CATEGORY_ITEM");
-                public static LocalizationKey ACHIEVEMENT_SHOWING_INCOMPLETE = CreateKey("ACCESSIBILITY_ACHIEVEMENT_SHOWING_INCOMPLETE");
-                public static LocalizationKey ACHIEVEMENT_LIST_HELP = CreateKey("ACCESSIBILITY_ACHIEVEMENT_LIST_HELP");
-                                public static LocalizationKey ACHIEVEMENT_VIEW_TIER = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_TIER");
-                                public static LocalizationKey ACHIEVEMENT_VIEW_PROGRESS = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_PROGRESS");
-                                public static LocalizationKey ACHIEVEMENT_VIEW_COMPLETED = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_COMPLETED");
-                                                                                                public static LocalizationKey ACHIEVEMENT_VIEW_CLAIM = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_CLAIM");
-                                                                                                public static LocalizationKey ACHIEVEMENT_CLAIMABLE = CreateKey("ACCESSIBILITY_ACHIEVEMENT_CLAIMABLE");
-                                                                                                public static LocalizationKey ACHIEVEMENT_VIEW_EARN = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_EARN");
-                                                                public static LocalizationKey ACHIEVEMENT_COULD_NOT_CLAIM = CreateKey("ACCESSIBILITY_ACHIEVEMENT_COULD_NOT_CLAIM");
-                                                                public static LocalizationKey ACCESSIBILITY_JOURNAL_EVENT_REWARD_TRACK_PREVIEW=CreateKey("ACCESSIBILITY_JOURNAL_EVENT_REWARD_TRACK_PREVIEW");
-                                                                public static LocalizationKey ACCESSIBILITY_JOURNAL_EVENT_REWARD_TRACK_DESC=CreateKey("ACCESSIBILITY_JOURNAL_EVENT_REWARD_TRACK_DESC");
+    public static LocalizationKey ARENA_DRAFT_SWITCH_HELP = CreateKey("ACCESSIBILITY_ARENA_DRAFT_SWITCH_HELP");
+    public static LocalizationKey ARENA_WINS_LOSSES = CreateKey("ACCESSIBILITY_ARENA_WINS_LOSSES");
+    public static LocalizationKey ARENA_TICKETS_COUNT = CreateKey("ACCESSIBILITY_ARENA_TICKETS_COUNT");
+
+    //journal
+    public static LocalizationKey ACHIEVEMENT_CATEGORY_TITLE = CreateKey("ACCESSIBILITY_ACHIEVEMENT_CATEGORY_TITLE");
+    public static LocalizationKey ACHIEVEMENT_CATEGORY_RECENT = CreateKey("ACCESSIBILITY_ACHIEVEMENT_CATEGORY_RECENT");
+    public static LocalizationKey ACHIEVEMENT_CATEGORY_ITEM = CreateKey("ACCESSIBILITY_ACHIEVEMENT_CATEGORY_ITEM");
+    public static LocalizationKey ACHIEVEMENT_SHOWING_INCOMPLETE = CreateKey("ACCESSIBILITY_ACHIEVEMENT_SHOWING_INCOMPLETE");
+    public static LocalizationKey ACHIEVEMENT_LIST_HELP = CreateKey("ACCESSIBILITY_ACHIEVEMENT_LIST_HELP");
+    public static LocalizationKey ACHIEVEMENT_VIEW_TIER = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_TIER");
+    public static LocalizationKey ACHIEVEMENT_VIEW_PROGRESS = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_PROGRESS");
+    public static LocalizationKey ACHIEVEMENT_VIEW_COMPLETED = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_COMPLETED");
+    public static LocalizationKey ACHIEVEMENT_VIEW_CLAIM = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_CLAIM");
+    public static LocalizationKey ACHIEVEMENT_CLAIMABLE = CreateKey("ACCESSIBILITY_ACHIEVEMENT_CLAIMABLE");
+    public static LocalizationKey ACHIEVEMENT_VIEW_EARN = CreateKey("ACCESSIBILITY_ACHIEVEMENT_VIEW_EARN");
+    public static LocalizationKey ACHIEVEMENT_COULD_NOT_CLAIM = CreateKey("ACCESSIBILITY_ACHIEVEMENT_COULD_NOT_CLAIM");
+    public static LocalizationKey ACCESSIBILITY_JOURNAL_EVENT_REWARD_TRACK_PREVIEW=CreateKey("ACCESSIBILITY_JOURNAL_EVENT_REWARD_TRACK_PREVIEW");
+    public static LocalizationKey ACCESSIBILITY_JOURNAL_EVENT_REWARD_TRACK_DESC=CreateKey("ACCESSIBILITY_JOURNAL_EVENT_REWARD_TRACK_DESC");
+
     public string Key { get; private set; }
 
     private LocalizationKey(string key)
diff --git a/Assembly-CSharp/Accessibility/Localization/LocalizedText.cs b/Assembly-CSharp/Accessibility/Localization/LocalizedText.cs
index e313e65..6caa7f5 100644
--- a/Assembly-CSharp/Accessibility/Localization/LocalizedText.cs
+++ b/Assembly-CSharp/Accessibility/Localization/LocalizedText.cs
@@ -23,6 +23,8 @@ class LocalizedText
     public static string MODES_MENU_TITLE => LocalizationUtils.Get(LocalizationKey.GLOBAL_CHOOSE_MODE);
     public static string MODES_SOLO_ADVENTURES_OPTION => LocalizationUtils.Get(LocalizationKey.GLOBAL_SOLO_ADVENTURES);
         public static string MODES_ARENA_OPTION => LocalizationUtils.Get(LocalizationKey.GLOBAL_ARENA);
+        public static string MODES_DUELS_OPTION => LocalizationUtils.Get(LocalizationKey.GLOBAL_DUELS);
+        public static string MODES_TAVERN_OPTION => LocalizationUtils.Get(LocalizationKey.GLOBAL_TAVERN);
 
     // Global
     public static string GLOBAL_GAME_LOADED => LocalizationUtils.Get(LocalizationKey.GLOBAL_GAME_LOADED);
diff --git a/Assembly-CSharp/AdventureDungeonCrawlDisplay.cs b/Assembly-CSharp/AdventureDungeonCrawlDisplay.cs
index 52a9296..39bde55 100644
--- a/Assembly-CSharp/AdventureDungeonCrawlDisplay.cs
+++ b/Assembly-CSharp/AdventureDungeonCrawlDisplay.cs
@@ -47,6 +47,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 		public void UpdateHeroDataFromHeroCardDbId(int heroCardDbId)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl UpdateHeroDataFromHeroCardDbId");
 			if (heroCardDbId == 0)
 			{
 				ClearHeroData();
@@ -83,6 +84,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 		public void UpdateHeroDataFromClass(TAG_CLASS heroClass)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl UpdateHeroDataFromClass");
 			if (heroClass == TAG_CLASS.INVALID)
 			{
 				ClearHeroData();
@@ -96,6 +98,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 		private void ClearHeroData()
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ClearHeroData");
 			HeroCardDbId = 0;
 			HeroCardId = string.Empty;
 			if (HeroClasses != null)
@@ -226,6 +229,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 	private DungeonCrawlDeckSelect m_dungeonCrawlDeckSelect;
 
 	private Actor m_heroActor;
+	private DungeonCrawlHeroDetails m_heroDetails;
 
 	private PlayerHeroData m_playerHeroData;
 
@@ -313,16 +317,19 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public static AdventureDungeonCrawlDisplay Get()
 	{
+		//Log.Accessibility.PrintInfo("I'm now in DungeonCrawl AdventureDungeonCrawlDisplay");
 		return m_instance;
 	}
 
 	private void Awake()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl Awake");
 		m_instance = this;
 	}
 
 	private void Start()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl Start");
 		CollectionManager.Get().RegisterDeckCreatedListener(OnDeckCreated);
 		GameMgr.Get().RegisterFindGameEvent(OnFindGameEvent);
 		m_isPVPDR = SceneMgr.Get().IsInDuelsMode();
@@ -330,6 +337,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public void StartRun(DungeonCrawlServices services)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl StartRun");
 		m_dungeonCrawlData = services.DungeonCrawlData;
 		m_subsceneController = services.SubsceneController;
 		m_assetLoadingHelper = services.AssetLoadingHelper;
@@ -343,6 +351,9 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		{
 			m_playMat.SetPlayerHeroDbId(m_playerHeroData.HeroCardDbId);
 		};
+		//Log.Accessibility.PrintInfo("I'm now in DungeonCrawl StartRun HeroCardDbId: "+m_playerHeroData.HeroCardDbId.ToString()); //0
+		//Log.Accessibility.PrintInfo("I'm now in DungeonCrawl StartRun HeroCardId: "+m_playerHeroData.HeroCardId.ToString());
+		//Log.Accessibility.PrintInfo("I'm now in DungeonCrawl StartRun HeroClasses: "+m_playerHeroData.HeroClasses.ToString());
 		m_AdventureTitle.Text = m_adventureDataRecord.Name;
 		m_gameSaveDataServerKey = (GameSaveKeyId)m_adventureDataRecord.GameSaveDataServerKey;
 		m_gameSaveDataClientKey = (GameSaveKeyId)m_adventureDataRecord.GameSaveDataClientKey;
@@ -438,15 +449,18 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		EnableBackButton(enabled: true);
 		if (m_isPVPDR)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DC m_isPVPDR");
 			Navigation.PushUnique(PvPDungeonRunScene.Get().NavigateBackFromPlaymat);
 		}
 		else
 		{
+			Log.Accessibility.PrintInfo("I'm now in DC m_isPVPDR Else");
 			Navigation.PushUnique(OnNavigateBack);
 		}
 		m_BackButton.AddEventListener(UIEventType.RELEASE, OnBackButtonPress);
 		if (m_ShowDeckButton != null)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DC m_ShowDeckButton");
 			m_ShowDeckButton.AddEventListener(UIEventType.RELEASE, OnShowDeckButtonPress);
 		}
 		DisableBackButtonIfInDemoMode();
@@ -456,6 +470,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
     public void EnablePlayButton()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl EnablePlayButton");
 		if (m_playMat != null)
 		{
 			m_playMat.PlayButton.Enable();
@@ -464,6 +479,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public void DisablePlayButton()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl DisablePlayButton");
 		if (m_playMat != null && m_playMat.PlayButton.IsEnabled())
 		{
 			m_playMat.PlayButton.Disable();
@@ -472,6 +488,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public void EnableBackButton(bool enabled)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl EnableBackButton");
 		if (m_BackButton != null && m_BackButton.IsEnabled() != enabled)
 		{
 			m_BackButton.SetEnabled(enabled);
@@ -481,6 +498,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnDeckTrayBigCardShown(Actor shownActor, EntityDef entityDef)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnDeckTrayBigCardShown");
 		if (shownActor == null || entityDef == null)
 		{
 			return;
@@ -500,6 +518,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnPlayMatPlayButtonReady(PlayButton playButton)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnPlayMatPlayButtonReady");
 		if (playButton == null)
 		{
 			Error.AddDevWarning("UI Error!", "PlayButtonReference is null, or does not have a PlayButton component on it!");
@@ -523,6 +542,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnDungeonCrawlDeckTrayReady(DungeonCrawlDeckSelect deckSelect)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnDungeonCrawlDeckTrayReady");
 		m_dungeonCrawlDeckSelect = deckSelect;
 		if (m_dungeonCrawlDeckSelect == null)
 		{
@@ -551,6 +571,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnPlayMatReady(AdventureDungeonCrawlPlayMat playMat)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnPlayMatReady");
 		if (playMat == null)
 		{
 			Error.AddDevWarning("UI Error!", "m_dungeonCrawlPlayMatReference is null, or does not have a AdventureDungeonCrawlPlayMat component on it!");
@@ -579,6 +600,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void Update()
 	{
+		//Log.Accessibility.PrintInfo("I'm now in DungeonCrawl Update");
 		if (m_dungeonCrawlData != null && m_dungeonCrawlData.IsDevMode && InputCollection.GetKeyDown(KeyCode.Z) && !(m_playMat == null))
 		{
 			if (m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.SHOWING_BOSS_GRAVEYARD)
@@ -594,6 +616,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnDestroy()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnDestroy");
 		m_instance = null;
 		m_currentBossHeroPowerFullDef?.Dispose();
 		m_currentHeroPowerFullDef?.Dispose();
@@ -614,6 +637,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnBossActorLoaded(AssetReference assetRef, GameObject go, object callbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnBossActorLoaded");
 		m_bossActor = OnActorLoaded(assetRef, go, m_playMat.m_nextBossFaceBone.gameObject, withRotation: true);
 		if (m_bossActor != null)
 		{
@@ -640,6 +664,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void LoadInitialAssets()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl LoadInitialAssets");
 		AdventureDbId selectedAdventure = m_dungeonCrawlData.GetSelectedAdventure();
 		AdventureModeDbId selectedMode = m_dungeonCrawlData.GetSelectedMode();
 		AdventureDataDbfRecord adventureDataRecord = GameUtils.GetAdventureDataRecord((int)selectedAdventure, (int)selectedMode);
@@ -663,6 +688,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private IEnumerator HideBossHeroPowerTooltipAfterHover()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HideBossHeroPowerTooltipAfterHover");
 		float timer = 0f;
 		while (timer < m_RolloverTimeToHideBossHeroPowerTooltip)
 		{
@@ -679,6 +705,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnBossPowerBigCardLoaded(AssetReference assetRef, GameObject go, object callbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnBossPowerBigCardLoaded");
 		m_bossPowerBigCard = OnActorLoaded(assetRef, go, m_BossPowerBone);
 		if (m_bossPowerBigCard != null)
 		{
@@ -689,6 +716,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnHeroPowerBigCardLoaded(AssetReference assetRef, GameObject go, object callbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnHeroPowerBigCardLoaded");
 		m_heroPowerBigCard = OnActorLoaded(assetRef, go, m_HeroPowerBigCardBone);
 		if (m_heroPowerBigCard != null)
 		{
@@ -699,6 +727,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void RequestOrLoadCachedGameSaveData()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl RequestOrLoadCachedGameSaveData");
 		if (SceneMgr.Get().GetPrevMode() == SceneMgr.Mode.GAMEPLAY)
 		{
 			GameSaveDataManager.Get().ClearLocalData(m_gameSaveDataServerKey);
@@ -724,6 +753,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnRequestGameSaveDataServerResponse(bool success)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnRequestGameSaveDataServerResponse");
 		if (!success)
 		{
 			Debug.LogError("OnRequestGameSaveDataResponse: Error requesting game save data for current adventure.");
@@ -737,6 +767,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnRequestGameSaveDataClientResponse(bool success)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnRequestGameSaveDataClientResponse");
 		if (!success)
 		{
 			Debug.LogError("OnRequestGameSaveDataResponse: Error requesting game save data for current adventure.");
@@ -750,6 +781,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private IEnumerator InitializeFromGameSaveDataWhenReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl InitializeFromGameSaveDataWhenReady");
 		while (m_playMat == null || !m_playMat.IsReady())
 		{
 			Log.Adventures.Print("Waiting for Play Mat to be initialized before handling new Game Save Data.");
@@ -774,6 +806,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool IsScenarioValidForAdventureAndMode(ScenarioDbId selectedScenario)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl IsScenarioValidForAdventureAndMode");
 		if (!AdventureUtils.IsMissionValidForAdventureMode(m_dungeonCrawlData.GetSelectedAdventure(), m_dungeonCrawlData.GetSelectedMode(), selectedScenario))
 		{
 			Debug.LogErrorFormat("Scenario {0} is not a part of Adventure {1} and mode {2}! Something is probably wrong.", selectedScenario, m_dungeonCrawlData.GetSelectedAdventure(), m_dungeonCrawlData.GetSelectedMode());
@@ -784,6 +817,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void InitializeFromGameSaveData()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl InitializeFromGameSaveData");
 		AdventureDataDbfRecord adventureDataRecord = GameUtils.GetAdventureDataRecord((int)m_dungeonCrawlData.GetSelectedAdventure(), (int)m_dungeonCrawlData.GetSelectedMode());
 		m_playerHeroData.UpdateHeroDataFromClass(TAG_CLASS.INVALID);
 		List<long> values = null;
@@ -1029,6 +1063,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		{
 			if (m_isPVPDR)
 			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl InitializeFromGameSaveData - m_isPVPDR - calling ShowDuelsEndRun()");
 				ShowDuelsEndRun();
 			}
 			else
@@ -1173,6 +1208,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnPlayMatPaperControllerReady(VisualController paperController)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnPlayMatPaperControllerReady");
 		if (paperController == null)
 		{
 			Debug.LogError("paperController was null in OnPlayMatPaperControllerReady!");
@@ -1182,6 +1218,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void InitializePlayMat()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl InitializePlayMat");
 		m_assetLoadingHelper.AddAssetToLoad();
 		m_playMat.Initialize(m_dungeonCrawlData);
 		Widget component = m_playMat.GetComponent<WidgetTemplate>();
@@ -1201,6 +1238,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private IEnumerator SetPlayMatStateFromGameSaveDataWhenReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetPlayMatStateFromGameSaveDataWhenReady");
 		while (GameSaveDataManager.Get().IsRequestPending(m_gameSaveDataServerKey) || GameSaveDataManager.Get().IsRequestPending(m_gameSaveDataClientKey) || m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.TRANSITIONING_FROM_PREV_STATE)
 		{
 			yield return null;
@@ -1210,13 +1248,16 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private string GetPlayButtonTextForNextMission()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetPlayButtonTextForNextMission");
 		string value = "";
 		if (GameSaveDataManager.Get().GetSubkeyValue(m_gameSaveDataServerKey, GameSaveKeySubkeyId.PLAY_BUTTON_TEXT_OVERRIDE, out value) && !string.IsNullOrEmpty(value))
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetPlayButtonTextForNextMission - GetSubkeyValue: " + m_gameSaveDataServerKey.ToString());
 			return value;
 		}
 		if (m_isPVPDR && !m_isRunActive && (m_realDuelSeedDeck == null || !m_realDuelSeedDeck.IsValidForRuleset))
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetPlayButtonTextForNextMission - GLUE_PVPDR_BUILD_DECK");
 			return "GLUE_PVPDR_BUILD_DECK";
 		}
 		return "GLOBAL_PLAY";
@@ -1224,6 +1265,8 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool IsNextMissionASpecialEncounter()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl IsNextMissionASpecialEncounter");
+
 		if (!m_hasReceivedGameSaveDataServerKeyResponse)
 		{
 			Debug.LogError("GetPlayButtonTextForNextMission() - this cannot be called before we've gotten the Game Save Data Server Key response!");
@@ -1234,6 +1277,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetPlayMatStateFromGameSaveData()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetPlayMatStateFromGameSaveData");
 		List<long> values = null;
 		List<long> values2 = null;
 		List<long> values3 = null;
@@ -1289,6 +1333,8 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		}
 		if (flag && value == 0L && ((values2 != null && values2.Count > 0) || (values3 != null && values3.Count > 0) || (values4 != null && values4.Count > 0)))
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowLootOptions");
+			IsTreasureRewardChosen = true;
 			m_playMat.ShowLootOptions(values2, values3, values4);
 			return;
 		}
@@ -1300,16 +1346,19 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		}
 		if (m_isPVPDR)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowPVPDRActiveRun");
 			m_playMat.ShowPVPDRActiveRun(GetPlayButtonTextForNextMission());
 		}
 		else
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowNextBoss");
 			m_playMat.ShowNextBoss(GetPlayButtonTextForNextMission());
 		}
 	}
 
 	private void SetPlaymatStateForShrineSelection(List<long> shrineOptions)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetPlaymatStateForShrineSelection");
 		if (shrineOptions == null || shrineOptions.Count == 0)
 		{
 			Log.Adventures.PrintError("SetPlaymatStateForShrineSelection: No shrine options found for adventure.");
@@ -1333,11 +1382,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private List<long> GetDefaultStartingShrineOptions_TRL()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetDefaultStartingShrineOptions_TRL");
 		return new List<long> { 52891L, 51920L, 53036L };
 	}
 
 	private IEnumerator ShowDeckSelectionTutorialPopupWhenReady(Action popupDismissedCallback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowDeckSelectionTutorialPopupWhenReady");
 		while (!m_subsceneTransitionComplete)
 		{
 			yield return new WaitForEndOfFrame();
@@ -1363,6 +1414,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool HandleDemoModeReset()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HandleDemoModeReset");
 		if (IsInDemoMode() && (m_numBossesDefeated >= 3 || m_bossWhoDefeatedMeId != 0L))
 		{
 			m_isRunActive = false;
@@ -1378,6 +1430,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void TryShowWelcomeBanner()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl TryShowWelcomeBanner");
 		if (!s_shouldShowWelcomeBanner)
 		{
 			return;
@@ -1400,6 +1453,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool ShouldShowBossHeroPowerTutorial()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShouldShowBossHeroPowerTutorial");
 		GameSaveDataManager.Get().GetSubkeyValue(m_gameSaveDataClientKey, GameSaveKeySubkeyId.DUNGEON_CRAWL_BOSS_HERO_POWER_TUTORIAL_PROGRESS, out long value);
 		if (value == 0L)
 		{
@@ -1415,6 +1469,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void ShowRunEnd(List<long> defeatedBossIds, long bossWhoDefeatedMeId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowRunEnd");
 		m_BackButton.Flip(faceUp: false, forceImmediate: true);
 		m_BackButton.SetEnabled(enabled: false);
 		m_assetLoadingHelper.AddAssetToLoad();
@@ -1423,6 +1478,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private int GetNumberOfClassesThatHaveCompletedAdventure()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetNumberOfClassesThatHaveCompletedAdventure");
 		int num = 0;
 		foreach (TAG_CLASS item in GameSaveDataManager.GetClassesFromDungeonCrawlProgressMap())
 		{
@@ -1436,6 +1492,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool HasCompletedAdventureWithAllClasses()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HasCompletedAdventureWithAllClasses");
 		List<GuestHero> guestHeroesForCurrentAdventure = m_dungeonCrawlData.GetGuestHeroesForCurrentAdventure();
 		if (guestHeroesForCurrentAdventure.Count > 0)
 		{
@@ -1463,11 +1520,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool HasCompletedAdventureWithClass(TAG_CLASS tagClass)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HasCompletedAdventureWithClass");
 		return GetRunWinsForClass(tagClass) > 0;
 	}
 
 	private void RunEndCompleted()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl RunEndCompleted");
 		if (!(m_BackButton == null))
 		{
 			m_dungeonCrawlData.SelectedHeroCardDbId = 0L;
@@ -1482,6 +1541,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetUpBossKillCounter(int heroCardDbId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetUpBossKillCounter");
 		bool shouldSkipHeroSelect = m_shouldSkipHeroSelect;
 		long wins = 0L;
 		long value = 0L;
@@ -1497,11 +1557,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 				if (!GetBossWinsForGuestHero(guestHeroIdFromHeroCardDbId, selectedAdventureDataRecord.AdventureId, out wins))
 				{
 					wins = GetBossWinsForClass(tagClassFromCardDbId);
+					Log.Accessibility.PrintInfo("wins 1: GetBossWinsForClass: "+wins.ToString());
 				}
 			}
 			else
 			{
 				wins = GetBossWinsForClass(tagClassFromCardDbId);
+				Log.Accessibility.PrintInfo("wins 2: GetBossWinsForClass: "+wins.ToString());
 			}
 			value = GetRunWinsForClass(tagClassFromCardDbId);
 		}
@@ -1509,6 +1571,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		{
 			GameSaveDataManager.Get().GetSubkeyValue(m_gameSaveDataServerKey, GameSaveKeySubkeyId.DUNGEON_CRAWL_ALL_CLASSES_TOTAL_BOSS_WINS, out wins);
 			GameSaveDataManager.Get().GetSubkeyValue(m_gameSaveDataServerKey, GameSaveKeySubkeyId.DUNGEON_CRAWL_ALL_CLASSES_TOTAL_RUN_WINS, out value);
+			Log.Accessibility.PrintInfo("DUNGEON_CRAWL_ALL_CLASSES_TOTAL_RUN_WINS: "+GameSaveDataManager.Get().GetSubkeyValue(m_gameSaveDataServerKey, GameSaveKeySubkeyId.DUNGEON_CRAWL_ALL_CLASSES_TOTAL_RUN_WINS, out value).ToString());
 		}
 		m_bossKillCounter.SetBossWins(wins);
 		if (value > 0)
@@ -1520,6 +1583,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private long GetRunWinsForClass(TAG_CLASS tagClass)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetRunWinsForClass");
 		long value = 0L;
 		if (GameSaveDataManager.GetProgressSubkeyForDungeonCrawlClass(tagClass, out var progressSubkeys))
 		{
@@ -1540,6 +1604,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		{
 			if (item.CardId == num)
 			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl IsCardLoadoutTreasureForCurrentHero item: "+item.UnlockCriteriaText);
 				return true;
 			}
 		}
@@ -1548,6 +1613,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool GetBossWinsForGuestHero(int guestHeroId, int adventureId, out long wins)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetBossWinsForGuestHero");
 		int baseGuestHeroIdForAdventure = AdventureUtils.GetBaseGuestHeroIdForAdventure((AdventureDbId)adventureId, guestHeroId);
 		if (GameSaveDataManager.GetBossWinsSubkeyForDungeonCrawlGuestHero((baseGuestHeroIdForAdventure > 0) ? baseGuestHeroIdForAdventure : guestHeroId, out var bossWinsSubkey))
 		{
@@ -1560,6 +1626,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private long GetBossWinsForClass(TAG_CLASS tagClass)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetBossWinsForClass");
 		long value = 0L;
 		if (GameSaveDataManager.GetProgressSubkeyForDungeonCrawlClass(tagClass, out var progressSubkeys))
 		{
@@ -1570,6 +1637,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetUpDeckListFromShrine(long shrineCardId, bool playDeckGlowAnimation)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetUpDeckListFromShrine");
 		List<long> list = new List<long>();
 		CardTagDbfRecord shrineDeckCardTagRecord = GameDbf.CardTag.GetRecord((CardTagDbfRecord r) => r.CardId == (int)shrineCardId && r.TagId == 1099);
 		foreach (DeckCardDbfRecord record in GameDbf.DeckCard.GetRecords((DeckCardDbfRecord r) => r.DeckId == shrineDeckCardTagRecord.TagValue))
@@ -1583,6 +1651,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetUpDeckListFromScenario(ScenarioDbId scenario, bool useLoadoutOfActiveRun)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetUpDeckListFromScenario");
 		ScenarioDbfRecord record = GameDbf.Scenario.GetRecord((int)scenario);
 		if (record != null)
 		{
@@ -1595,6 +1664,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetUpDeckList(List<CardWithPremiumStatus> deckCardList, bool useLoadoutOfActiveRun, bool playGlowAnimation = false, List<long> deckCardIndices = null, List<long> deckCardEnchantments = null, RuneType[] runeOrder = null, Dictionary<string, SideboardDeck> sideboardMap = null)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetUpDeckList");
 		if (m_playerHeroData.HeroClasses.Count <= 0 || m_playerHeroData.HeroClasses[0] == TAG_CLASS.INVALID)
 		{
 			Log.Adventures.PrintError("AdventureDungeonCrawlDisplay.SetUpDeckList() - HeroClasses is INVALID!");
@@ -1724,6 +1794,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetUpHeroPortrait(PlayerHeroData playerHeroData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetUpHeroPortrait");
 		if (m_heroActor == null)
 		{
 			Log.Adventures.PrintError("Unable to change hero portrait. No hero actor has been loaded.");
@@ -1762,6 +1833,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetHero(string cardID, TAG_PREMIUM premium)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetHero");
 		if (m_heroActor == null)
 		{
 			Log.Adventures.PrintError("AdventureDungeonCrawlDisplay.SetHero was called but m_heroActor was null");
@@ -1784,6 +1856,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetHeroPower(string cardID)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetHeroPower");
 		if (m_heroPowerActor == null)
 		{
 			Log.Adventures.PrintError("AdventureDungeonCrawlDisplay.SetHeroPower was called but m_heroPowerActor was null.");
@@ -1816,6 +1889,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetUpPhoneNewRunScreen()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetUpPhoneNewRunScreen");
 		if ((bool)UniversalInputManager.UsePhoneUI)
 		{
 			m_dungeonCrawlDeckTray.gameObject.SetActive(value: false);
@@ -1826,6 +1900,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public void SetShowDeckButtonEnabled(bool enabled)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetShowDeckButtonEnabled");
 		if ((bool)UniversalInputManager.UsePhoneUI && enabled != m_ShowDeckButton.IsEnabled())
 		{
 			m_ShowDeckButton.SetEnabled(enabled);
@@ -1835,6 +1910,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetUpPhoneRunCompleteScreen()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetUpPhoneRunCompleteScreen");
 		if ((bool)UniversalInputManager.UsePhoneUI)
 		{
 			m_ShowDeckButtonFrame.SetActive(value: false);
@@ -1865,6 +1941,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool IsInDefeatScreen()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl IsInDefeatScreen");
 		if (m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.SHOWING_BOSS_GRAVEYARD)
 		{
 			return m_numBossesDefeated < m_numBossesInRun;
@@ -1874,6 +1951,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetUpCardsCreatedByTreasures()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetUpCardsCreatedByTreasures");
 		if (m_cardsAddedToDeckMap != null && m_cardsAddedToDeckMap.Count != 0 && m_cardsAddedToDeckMap.Count % 2 != 1)
 		{
 			Dictionary<long, long> dictionary = new Dictionary<long, long>();
@@ -1887,6 +1965,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public static bool OnNavigateBack()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnNavigateBack");
 		if (m_instance == null)
 		{
 			Debug.LogError("Trying to navigate back, but AdventureDungeonCrawlDisplay has been destroyed!");
@@ -1921,12 +2000,14 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnBackButtonPress(UIEvent e)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnBackButtonPress");
 		EnableBackButton(enabled: false);
 		Navigation.GoBack();
 	}
 
 	private void GoToHeroSelectSubscene()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GoToHeroSelectSubscene");
 		bool num = m_dungeonCrawlData.GuestHeroesExistForCurrentAdventure();
 		m_playMat.PlayButton.Disable();
 		AdventureData.Adventuresubscene subscene = (num ? AdventureData.Adventuresubscene.ADVENTURER_PICKER : AdventureData.Adventuresubscene.MISSION_DECK_PICKER);
@@ -1938,6 +2019,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void GoBackToHeroPower()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GoBackToHeroPower");
 		m_dungeonCrawlData.SelectedHeroPowerDbId = 0L;
 		SetHeroPower(null);
 		StartCoroutine(ShowHeroPowerOptionsWhenReady());
@@ -1945,11 +2027,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void GoBackFromHeroPower()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GoBackFromHeroPower");
 		m_playMat.PlayHeroPowerOptionSelected();
 	}
 
 	private void GoBackToTreasureLoadoutSelection()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GoBackToTreasureLoadoutSelection");
 		SetUpDeckList(new List<CardWithPremiumStatus>(), useLoadoutOfActiveRun: false, playGlowAnimation: true);
 		m_dungeonCrawlData.SelectedLoadoutTreasureDbId = 0L;
 		StartCoroutine(ShowTreasureSatchelWhenReady());
@@ -1957,11 +2041,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void GoBackFromTreasureLoadoutSelection()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GoBackFromTreasureLoadoutSelection");
 		m_playMat.PlayTreasureSatchelOptionHidden();
 	}
 
 	private void GoBackFromDeckTemplateSelection()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GoBackFromDeckTemplateSelection");
 		m_dungeonCrawlData.SelectedDeckId = 0L;
 		SetUpDeckList(new List<CardWithPremiumStatus>(), useLoadoutOfActiveRun: false, playGlowAnimation: true);
 		if ((bool)UniversalInputManager.UsePhoneUI)
@@ -1984,6 +2070,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private static bool OnNavigateBackFromCurrentLoadoutState()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnNavigateBackFromCurrentLoadoutState");
 		AdventureDungeonCrawlPlayMat playMat = m_instance.m_playMat;
 		if (playMat != null && playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.TRANSITIONING_FROM_PREV_STATE)
 		{
@@ -2020,6 +2107,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void GoToNextLoadoutState()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GoToNextLoadoutState");
 		switch (m_currentLoadoutState)
 		{
 		case DungeonRunLoadoutState.HEROPOWER:
@@ -2062,6 +2150,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void LockInDuelsLoadoutSelections()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl LockInDuelsLoadoutSelections");
 		Navigation.RemoveHandler(OnNavigateBackFromCurrentLoadoutState);
 		Navigation.RemoveHandler(GuestHeroPickerTrayDisplay.OnNavigateBack);
 		if (m_dungeonCrawlData.HasValidLoadoutForSelectedAdventure())
@@ -2086,6 +2175,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void LockInNewRunSelectionsAndTransition()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl LockInNewRunSelectionsAndTransition");
 		Navigation.RemoveHandler(OnNavigateBackFromCurrentLoadoutState);
 		Navigation.RemoveHandler(GuestHeroPickerTrayDisplay.OnNavigateBack);
 		Navigation.RemoveHandler(AdventureLocationSelectBook.OnNavigateBack);
@@ -2141,6 +2231,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnPlayButtonPress(UIEvent e)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnPlayButtonPress");
 		PlayButton playButton = e.GetElement() as PlayButton;
 		if (playButton != null)
 		{
@@ -2174,6 +2265,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private int GetHeroCardIdToUse()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetHeroCardIdToUse");
 		if (m_dungeonCrawlData.GetGuestHeroesForCurrentAdventure().Count > 0 && (!m_shouldSkipHeroSelect || m_mustPickShrine))
 		{
 			int result = (int)m_dungeonCrawlData.SelectedHeroCardDbId;
@@ -2188,6 +2280,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void QueueForGame()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl QueueForGame");
 		int heroCardIdToUse = GetHeroCardIdToUse();
 		long deckid = 0L;
 		bool flag = false;
@@ -2237,11 +2330,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnShowDeckButtonPress(UIEvent e)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnShowDeckButtonPress");
 		ShowMobileDeckTray(m_dungeonCrawlDeckTray.gameObject.GetComponent<SlidingTray>());
 	}
 
 	protected void OnSubSceneLoaded(object sender, EventArgs args)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnSubSceneLoaded");
 		m_playMat.OnSubSceneLoaded();
 		m_playMat.SetRewardOptionSelectedCallback(OnRewardOptionSelected);
 		m_playMat.SetTreasureSatchelOptionSelectedCallback(OnTreasureSatchelOptionSelected);
@@ -2251,6 +2346,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	protected void OnSubSceneTransitionComplete(object sender, EventArgs args)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnSubSceneTransitionComplete");
 		m_subsceneTransitionComplete = true;
 		if (m_dungeonCrawlDeckTray != null)
 		{
@@ -2264,6 +2360,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnHeroActorLoaded(AssetReference assetRef, GameObject go, object callbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnHeroActorLoaded");
 		if (go == null)
 		{
 			Debug.LogWarning($"AdventureDungeonCrawlDisplay.OnHeroActorLoaded() - FAILED to load actor \"{assetRef}\"");
@@ -2283,6 +2380,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnHeroPowerActorLoaded(AssetReference assetRef, GameObject go, object callbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnHeroPowerActorLoaded");
 		if (go == null)
 		{
 			Debug.LogWarning($"AdventureDungeonCrawlDisplay.OnHeroPowerActorLoaded() - FAILED to load actor \"{assetRef}\"");
@@ -2314,6 +2412,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetHeroHealthVisual(Actor actor, bool show)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetHeroHealthVisual");
 		if (actor == null)
 		{
 			Log.Adventures.PrintError("SetHeroHealthVisual: actor provided is null!");
@@ -2324,11 +2423,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		{
 			actor.GetHealthText().Text = Convert.ToString(m_heroHealth);
 			actor.GetHealthText().AmbientLightBlend = 0f;
+			Log.Accessibility.PrintInfo("GetHealthText: "+actor.GetHealthText().Text);
 		}
 	}
 
 	private IEnumerator ShowTreasureSatchelWhenReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowTreasureSatchelWhenReady");
 		while (m_playMat == null || m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.TRANSITIONING_FROM_PREV_STATE)
 		{
 			yield return null;
@@ -2341,10 +2442,21 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		{
 			Navigation.PushUnique(OnNavigateBackFromCurrentLoadoutState);
 		}
+		while (!m_playMat.IsStateInitialized())
+		{
+			yield return null;
+		}
+		if (!AccessibilityMgr.IsCurrentlyFocused(this))
+		{
+			AccessibilityMgr.SetScreen(this);
+		}
+		ChooseTreasure();
+		ReadScreen();
 	}
 
 	private IEnumerator ShowHeroPowerOptionsWhenReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowHeroPowerOptionsWhenReady");
 		while (m_playMat == null || m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.TRANSITIONING_FROM_PREV_STATE)
 		{
 			yield return null;
@@ -2357,10 +2469,16 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		{
 			Navigation.PushUnique(OnNavigateBackFromCurrentLoadoutState);
 		}
+		if (!AccessibilityMgr.IsCurrentlyFocused(this))
+		{
+			AccessibilityMgr.SetScreen(this);
+		}
+		ChooseHeroPower();
 	}
 
 	private IEnumerator ShowDeckOptionsWhenReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowDeckOptionsWhenReady");
 		while (m_playMat == null || m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.TRANSITIONING_FROM_PREV_STATE)
 		{
 			yield return null;
@@ -2374,6 +2492,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private IEnumerator ShowBuildDeckButtonWhenReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowBuildDeckButtonWhenReady");
 		while (m_playMat == null || m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.TRANSITIONING_FROM_PREV_STATE)
 		{
 			yield return null;
@@ -2381,6 +2500,11 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 		m_currentLoadoutState = DungeonRunLoadoutState.LOADOUTCOMPLETE;
 		m_playMat.ShowPVPDRActiveRun(GetPlayButtonTextForNextMission());
 		m_playMat.PlayButton.SetText(GetPlayButtonTextForNextMission());
+		if (IsDuels())
+		{
+			ReadDuelsMenu();
+		}
+
 		if ((bool)UniversalInputManager.UsePhoneUI)
 		{
 			m_dungeonCrawlDeckSelect.deckTray.SetDungeonCrawlDeck(m_dungeonCrawlDeck, playGlowAnimation: false);
@@ -2397,6 +2521,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnBossFullDefLoaded(string cardId, DefLoader.DisposableFullDef def, object userData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnBossFullDefLoaded");
 		using (def)
 		{
 			if (def == null)
@@ -2441,6 +2566,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnBossPowerFullDefLoaded(string cardId, DefLoader.DisposableFullDef def, object userData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnBossPowerFullDefLoaded");
 		if (def == null)
 		{
 			Debug.LogError($"Unable to load {cardId} hero power def for Dungeon Crawl boss.", base.gameObject);
@@ -2456,6 +2582,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnTreasureSatchelOptionSelected(long treasureLoadoutDbId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnTreasureSatchelOptionSelected");
 		m_dungeonCrawlData.SelectedLoadoutTreasureDbId = treasureLoadoutDbId;
 		AdventureConfig.Get().SelectedLoadoutTreasureDbId = treasureLoadoutDbId;
 		if (m_dungeonCrawlData.SelectableHeroPowersAndDecksExist())
@@ -2483,6 +2610,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private int GetGuestHeroCardDbIdForCurrentAdventure(int guestHeroId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetGuestHeroCardDbIdForCurrentAdventure");
 		foreach (GuestHero item in m_dungeonCrawlData.GetGuestHeroesForCurrentAdventure())
 		{
 			if (item.guestHeroId == guestHeroId)
@@ -2495,6 +2623,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void UpdateHeroFromTreasure(AdventureLoadoutTreasuresDbfRecord selectedTreasure)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl UpdateHeroFromTreasure");
 		m_dungeonCrawlData.SelectedHeroCardDbId = GetGuestHeroCardDbIdForCurrentAdventure(selectedTreasure.GuestHeroVariantId);
 		m_playerHeroData.UpdateHeroDataFromHeroCardDbId((int)m_dungeonCrawlData.SelectedHeroCardDbId);
 		SetUpHeroPortrait(m_playerHeroData);
@@ -2502,6 +2631,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnHeroPowerOptionSelected(long heroPowerDbId, bool isLocked)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnHeroPowerOptionSelected");
 		if (!isLocked)
 		{
 			m_dungeonCrawlData.SelectedHeroPowerDbId = heroPowerDbId;
@@ -2518,6 +2648,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnHeroPowerOptionRollover(long heroPowerDbId, GameObject bone)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnHeroPowerOptionRollover");
 		GameUtils.SetParent(m_heroPowerBigCard, bone);
 		using (DefLoader.DisposableFullDef heroPowerFullDef = DefLoader.Get().GetFullDef(GameUtils.TranslateDbIdToCardId((int)heroPowerDbId)))
 		{
@@ -2527,12 +2658,14 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnHeroPowerOptionRollout(long heroPowerDbId, GameObject bone)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnHeroPowerOptionRollout");
 		BigCardHelper.HideBigCard(m_heroPowerBigCard);
 		GameUtils.SetParent(m_heroPowerBigCard, m_HeroPowerBigCardBone);
 	}
 
 	private void OnDeckOptionSelected(int deckId, List<long> deckContent, bool deckIsLocked)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnDeckOptionSelected");
 		m_playMat.DeselectAllDeckOptionsWithoutId(deckId);
 		m_dungeonCrawlData.SelectedDeckId = deckId;
 		SetUpDeckList(CardWithPremiumStatus.ConvertList(deckContent), useLoadoutOfActiveRun: false, playGlowAnimation: true);
@@ -2575,6 +2708,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnRewardOptionSelected(AdventureDungeonCrawlRewardOption.OptionData optionData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnRewardOptionSelected");
 		if (!GameSaveDataManager.Get().IsDataReady(m_gameSaveDataServerKey))
 		{
 			Log.Adventures.PrintError("Attempting to make a selection, but no data is ready yet!");
@@ -2639,10 +2773,12 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 			StartCoroutine(SetPlayMatStateFromGameSaveDataWhenReady());
 		}
 		PlayRewardSelectVO(optionData);
+		IsTreasureRewardChosen = true;
 	}
 
 	private void PlayRewardSelectVO(AdventureDungeonCrawlRewardOption.OptionData optionData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl PlayRewardSelectVO");
 		if (optionData.optionType != AdventureDungeonCrawlPlayMat.OptionType.TREASURE && optionData.optionType != AdventureDungeonCrawlPlayMat.OptionType.SHRINE_TREASURE)
 		{
 			return;
@@ -2660,6 +2796,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool ShouldShowRunCompletedScreen()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShouldShowRunCompletedScreen");
 		if (m_isPVPDR)
 		{
 			return DungeonCrawlUtil.IsPVPDRSessionComplete();
@@ -2677,6 +2814,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void ShowMobileDeckTray(SlidingTray tray)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowMobileDeckTray");
 		if (!UniversalInputManager.UsePhoneUI)
 		{
 			return;
@@ -2699,6 +2837,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnMobileDeckTrayToggled(SlidingTray tray, bool shown, SlidingTray.TrayToggledListener trayListener)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnMobileDeckTrayToggled");
 		if (!shown)
 		{
 			tray.UnregisterTrayToggleListener(trayListener);
@@ -2708,6 +2847,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool OnFindGameEvent(FindGameEventData eventData, object userData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnFindGameEvent");
 		switch (eventData.m_state)
 		{
 		case FindGameState.CLIENT_CANCELED:
@@ -2730,6 +2870,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void HandleGameStartupFailure()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HandleGameStartupFailure");
 		if (SceneMgr.Get().IsInDuelsMode())
 		{
 			PresenceMgr.Get().SetStatus(Global.PresenceStatus.DUELS_IDLE);
@@ -2739,6 +2880,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private IEnumerator ShowDemoThankQuote()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowDemoThankQuote");
 		string thankQuote = Vars.Key("Demo.DungeonThankQuote").GetStr("");
 		float @float = Vars.Key("Demo.DungeonThankQuoteDelaySeconds").GetFloat(1f);
 		float blockSeconds = Vars.Key("Demo.DungeonThankQuoteDurationSeconds").GetFloat(5f);
@@ -2765,11 +2907,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private static bool IsInDemoMode()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl IsInDemoMode");
 		return DemoMgr.Get().GetMode() == DemoMode.BLIZZCON_2017_ADVENTURE;
 	}
 
 	private void DisableBackButtonIfInDemoMode()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl DisableBackButtonIfInDemoMode");
 		if (IsInDemoMode())
 		{
 			m_BackButton.SetEnabled(enabled: false);
@@ -2779,6 +2923,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void SetDungeonCrawlDisplayVisualStyle()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SetDungeonCrawlDisplayVisualStyle");
 		DungeonRunVisualStyle visualStyle = m_dungeonCrawlData.VisualStyle;
 		foreach (DungeonCrawlDisplayStyleOverride item in m_DungeonCrawlDisplayStyle)
 		{
@@ -2805,6 +2950,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private string GetClassNameFromDeckClass(TAG_CLASS deckClass)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetClassNameFromDeckClass");
 		List<GuestHero> guestHeroesForCurrentAdventure = m_dungeonCrawlData.GetGuestHeroesForCurrentAdventure();
 		if (guestHeroesForCurrentAdventure.Count == 0)
 		{
@@ -2822,11 +2968,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private TAG_CLASS GetClassFromShrine(long shrineCardId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetClassFromShrine");
 		return GameUtils.GetTagClassFromCardDbId((int)shrineCardId);
 	}
 
 	private void ChangeHeroPortrait(string newHeroCardId, TAG_PREMIUM premium)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ChangeHeroPortrait");
 		if (m_heroActor == null)
 		{
 			Log.Adventures.PrintError($"Unable to change hero portrait to cardId={newHeroCardId}. No actor has been loaded.");
@@ -2845,6 +2993,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public static Actor OnActorLoaded(string actorName, GameObject actorObject, GameObject container, bool withRotation = false)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnActorLoaded");
 		Actor component = actorObject.GetComponent<Actor>();
 		if (component != null)
 		{
@@ -2865,6 +3014,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void ShowBigCard(Actor heroPowerBigCard, DefLoader.DisposableFullDef heroPowerFullDef, GameObject bone)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowBigCard");
 		Vector3? origin = null;
 		if (m_heroPowerActor != null)
 		{
@@ -2875,6 +3025,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnHeroClassIconsControllerReady(Widget widget)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnHeroClassIconsControllerReady");
 		if (widget == null)
 		{
 			Debug.LogWarning("AdventureDungeonCrawlDisplay.OnHeroIconsControllerReady - widget was null!");
@@ -2899,6 +3050,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private static void ResetDungeonCrawlSelections(IDungeonCrawlData data)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ResetDungeonCrawlSelections");
 		data.SelectedLoadoutTreasureDbId = 0L;
 		data.SelectedHeroPowerDbId = 0L;
 		data.SelectedDeckId = 0L;
@@ -2906,26 +3058,32 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnRetirePopupResponse(AlertPopup.Response response, object userData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnRetirePopupResponse");
 		if (response == AlertPopup.Response.CANCEL)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnRetirePopupResponse CANCEL");
 			m_retireButton.SetActive(value: true);
 			return;
 		}
 		Navigation.GoBack();
 		if ((bool)UniversalInputManager.UsePhoneUI)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnRetirePopupResponse UsePhoneUI");
 			Navigation.GoBack();
 		}
 		GameSaveDataManager.Get().SaveSubkey(new GameSaveDataManager.SubkeySaveRequest(m_gameSaveDataServerKey, GameSaveKeySubkeyId.DUNGEON_CRAWL_IS_RUN_RETIRED, 1L), delegate(bool dataWrittenSuccessfully)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnRetirePopupResponse GameSaveDataManager");
 			HandleRetireSuccessOrFail(dataWrittenSuccessfully);
 		});
 	}
 
 	private void HandleRetireSuccessOrFail(bool success)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HandleRetireSuccessOrFail");
 		if (!success)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl !success");
 			AlertPopup.PopupInfo popupInfo = new AlertPopup.PopupInfo();
 			popupInfo.m_headerText = GameStrings.Get("GLUE_ADVENTURE_DUNGEON_CRAWL_RETIRE_CONFIRMATION_HEADER");
 			popupInfo.m_text = GameStrings.Get("GLUE_ADVENTURE_DUNGEON_CRAWL_RETIRE_FAILURE_BODY");
@@ -2938,6 +3096,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public void CreateDuelsSeedDeck()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl CreateDuelsSeedDeck");
 		if (!m_seedDeckCreateRequested)
 		{
 			TAG_CLASS tagClassFromCardDbId = GameUtils.GetTagClassFromCardDbId((int)m_dungeonCrawlData.SelectedHeroCardDbId);
@@ -2949,6 +3108,9 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnDeckCreated(long deckID, string name)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnDeckCreated");
+		//IsDeckBuilt = true; // not needed anymore
+		//Log.Accessibility.PrintInfo("IsDeckBuilt1: "+ IsDeckBuilt);
 		if (m_seedDeckCreateRequested)
 		{
 			CollectionDeck deck = CollectionManager.Get().GetDeck(deckID);
@@ -2966,6 +3128,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public bool BackFromDeckEdit(CollectionDeck deck)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl BackFromDeckEdit");
 		SyncDeckList();
 		SaveDuelsDeckList();
 		StartCoroutine(EnablePlayButtonWhenDeckChangesAreSaved(20f));
@@ -3003,6 +3166,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private IEnumerator EnablePlayButtonWhenDeckChangesAreSaved(float timeout)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl EnablePlayButtonWhenDeckChangesAreSaved");
 		bool didTimeout = false;
 		while (m_realDuelSeedDeck.IsSavingChanges())
 		{
@@ -3036,6 +3200,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void EditCurrentDeck()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl EditCurrentDeck");
 		Navigation.Push(OnExitCollection);
 		if (m_dungeonCrawlDeck != null)
 		{
@@ -3056,6 +3221,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public bool IsDuelsDeckValid()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl IsDuelsDeckValid");
 		if (m_realDuelSeedDeck != null)
 		{
 			return m_realDuelSeedDeck.IsValidForRuleset;
@@ -3065,6 +3231,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public void SyncDeckList()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SyncDeckList");
 		CollectionDeck editedDeck = CollectionManager.Get().GetEditedDeck();
 		if (m_realDuelSeedDeck == null || editedDeck == null)
 		{
@@ -3094,6 +3261,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public void SaveDuelsDeckList()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SaveDuelsDeckList");
 		CollectionDeck editedDeck = CollectionManager.Get().GetEditedDeck();
 		if (m_realDuelSeedDeck != null && editedDeck != null)
 		{
@@ -3105,6 +3273,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private bool OnExitCollection()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnExitCollection");
 		if (CollectionDeckTray.Get().OnBackOutOfContainerContents())
 		{
 			PvPDungeonRunScene.Get().ShowDungeonCrawlDisplay(delegate
@@ -3124,6 +3293,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnPVPDRRetirePopupResponse(AlertPopup.Response response, object userData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnPVPDRRetirePopupResponse");
 		if (response == AlertPopup.Response.CANCEL)
 		{
 			m_retireButton.SetActive(value: true);
@@ -3135,6 +3305,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnPVPDRRetireResponse()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnPVPDRRetireResponse");
 		GameSaveDataManager.Get().Request(m_gameSaveDataServerKey);
 		Network.Get().SendPVPDRSessionInfoRequest();
 		Network.Get().RemoveNetHandler(PVPDRRetireResponse.PacketID.ID, OnPVPDRRetireResponse);
@@ -3161,6 +3332,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void ShowDuelsEndRun()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowDuelsEndRun");
 		PresenceMgr.Get().SetStatus(Global.PresenceStatus.DUELS_REWARD);
 		m_playMat.ShowPVPDRReward();
 		m_BackButton.SetEnabled(enabled: false);
@@ -3170,6 +3342,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	public void EndDuelsSession(long noticeId = 0L)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl EndDuelsSession");
 		m_rewardNoticeId = noticeId;
 		Network.Get().RegisterNetHandler(PVPDRSessionEndResponse.PacketID.ID, OnSessionEndResponse);
 		Network.Get().SendPVPDRSessionEndRequest();
@@ -3177,6 +3350,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private void OnSessionEndResponse()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnSessionEndResponse");
 		Network.Get().RemoveNetHandler(PVPDRSessionEndResponse.PacketID.ID, OnSessionEndResponse);
 		PVPDRSessionEndResponse pVPDRSessionEndResponse = Network.Get().GetPVPDRSessionEndResponse();
 		if (pVPDRSessionEndResponse.ErrorCode != 0)
@@ -3222,6 +3396,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	private IEnumerator ShowRatingChangePopupWhenReady(Action callback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ShowRatingChangePopupWhenReady");
 		PvPDungeonRunDisplay.Get().GetPVPDRLobbyDataModel().IsRatingNotice = true;
 		while (m_playMat == null || !m_playMat.IsReady() || m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.TRANSITIONING_FROM_PREV_STATE || !Navigation.CanGoBack)
 		{
@@ -3249,10 +3424,13 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 			key = "GLUE_PVPDR_END_OF_RUN_TIER_1_WIN";
 		}
 		PvPDungeonRunScene.ShowDuelsMessagePopup(GameStrings.Format("GLUE_PVPDR_END_OF_RUN_HEADER", lastRunWins), GameStrings.Get(key), GameStrings.Format("GLUE_PVPDR_RATING_CHANGE", text), callback);
+
+		ReadDuelsRetireScreen(GameStrings.Format("GLUE_PVPDR_END_OF_RUN_HEADER", lastRunWins), GameStrings.Get(key), GameStrings.Format("GLUE_PVPDR_RATING_CHANGE", text));
 	}
 
 	private void OnSessionEndComplete()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnSessionEndComplete");
 		PvPDungeonRunDisplay.Get().GetPVPDRLobbyDataModel().HasSession = false;
 		PvPDungeonRunDisplay.Get().GetPVPDRLobbyDataModel().IsSessionActive = false;
 		Navigation.PopBlockBackingOut();
@@ -3261,20 +3439,43 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 	#region Accessibility
 
-	private enum AccessibleState { WAITING, IS_VO_PLAYING, READING_PLAY_MENU, READING_DECK, RUN_COMPLETED };
+	private enum AccessibleState { WAITING, IS_VO_PLAYING, READING_DUELS_MENU, READING_PLAY_MENU, READING_DECK, CHOOSING_HERO_POWER, CHOOSING_TREASURE, CHOOSING_LOOT, RUN_COMPLETED, READING_STATS, CHOOSING_TREASURE_REWARD};
 
 	private AccessibleState m_curAccessibleState;
+	private AccessibleState m_prevAccessibleState;
 
 	private AccessibleState m_stateAfterVO;
 
 	private AccessibleMenu m_accessibleMenu;
-
+	private AccessibleMenu m_duelsMenu;
+	private AccessibleMultilineText m_accessibleStats;
 	private AccessibleListOfItems<AccessibleCollectibleCard> m_accessibleDeckTray;
+	private AccessibleListOfItems<AccessibleCollectibleCard> m_accessibleLootTray;
+
+	private AccessibleHorizontalMenu<AccessibleArenaDraftCard> m_AccessibleHeroPower;
+
+	private AccessibleHorizontalMenu<AccessibleArenaDraftCard> m_AccessibleTreasure;
+	private AccessibleHorizontalMenu<AccessibleArenaDraftCard> m_AccessibleTreasureReward;
+	//private AccessibleHorizontalMenu<AccessibleArenaDraftCard> m_AccessibleLoot;
+	private AccessibleMenu m_AccessibleLoot;
+	private AccessibleHorizontalMenu<AccessibleArenaDraftCard> m_AccessibleLootA;
+
+	private AccessibleHorizontalMenu<AccessibleArenaDraftCard> m_AccessibleLootB;
+
+	private AccessibleHorizontalMenu<AccessibleArenaDraftCard> m_AccessibleLootC;
 
 	private AdventureDataDbfRecord m_adventureDataRecord;
 
+	private Boolean IsTreasureRewardChosen;
+	//private static Boolean IsDeckBuilt;
+	private static int LootToRead = 0;
+	private static int readFirstTime;
+	public static Boolean ReadMenu = true;
+
+
 	private void ReadScreen()
     {
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadScreen");
 		if (!SupportedAdventure())
         {
 			return;
@@ -3282,18 +3483,63 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
 		AccessibilityMgr.SetScreen(this);
 
-		if (ShouldShowRunCompletedScreen())
+		if (ShouldShowRunCompletedScreen() && !IsDuels()) // üüü
         {
 			ReadCompletedScreen();
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadCompletedScreen");
         }
+		else if (IsDuels()) {
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadScreen IsDuels");
+			Log.Accessibility.PrintInfo("m_currentLoadoutState "+m_currentLoadoutState.ToString());
+			Log.Accessibility.PrintInfo("m_curAccessibleState "+m_curAccessibleState.ToString());
+			if (m_curAccessibleState == AccessibleState.CHOOSING_HERO_POWER)
+			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadScreen IsDuels CHOOSING_HERO_POWER");
+				return;
+			}
+			else if (m_curAccessibleState == AccessibleState.CHOOSING_TREASURE)
+			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadScreen IsDuels CHOOSING_TREASURE");
+				return; // don't read the duels menu after choosing
+			}
+			else if (m_curAccessibleState == AccessibleState.CHOOSING_TREASURE_REWARD)
+			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadScreen IsDuels CHOOSING_TREASURE_REWARD");
+				return;
+			}
+			else if (m_curAccessibleState == AccessibleState.CHOOSING_LOOT)
+			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadScreen IsDuels CHOOSING_LOOT");
+				return;
+			}
+			else if (ShouldShowRunCompletedScreen())
+			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadScreen IsDuels ShouldShowRunCompletedScreen");
+				PvPDungeonRunScene.IsRetired = true;
+				return;
+			}
+			else if (ReadMenu == false)
+			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadScreen ReadMenu == false"); // ggggg // todo need to set it to read again after return? or handle exception in HandleInput
+				return;
+			}
+			else
+			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadScreen IsDuels ReadDuelsMenu");
+				ReadDuelsMenu(); // todo can we change this default option in order to stop the menu from appearing we we don't need it? // ööö
+				//CreateDuelsMenu();
+			}
+		}
 		else
         {
             ReadPlayMenu(); // TODO: Figure out a cleanway to delay this until VO plays that doesn't require refactoring playMat..
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ELSE ReadPlayMenu");
         }
     }
 
     private void ReadCompletedScreen()
     {
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadCompletedScreen");
 		m_curAccessibleState = AccessibleState.RUN_COMPLETED;
 		m_stateAfterVO = AccessibleState.RUN_COMPLETED;
 
@@ -3303,11 +3549,25 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 	private string GetAdventureCompleteSpeech()
     {
 		var text = LocalizationUtils.Get(LocalizationKey.SCREEN_ADVENTURE_SCREEN_ADVENTURE_COMPLETE);
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl GetAdventureCompleteSpeech"+text);
 		return AccessibleSpeechUtils.CombineSentences(text, LocalizationUtils.Format(LocalizationKey.PRESS_KEY_TO_FINISH, AccessibleKey.CONFIRM));
     }
 
+    private void ReadDuelsRetireScreen(string header, string message, string ratingchange)
+    {
+		m_curAccessibleState = AccessibleState.RUN_COMPLETED;
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadDuelsRetireScreen");
+		//m_stateAfterVO = AccessibleState.RUN_COMPLETED; // voiceover? n/a
+		AccessibilityMgr.SetScreen(this);
+		var outputmessage1 = AccessibleSpeechUtils.CombineSentences(header, message);
+		var outputmessage2 = AccessibleSpeechUtils.CombineSentences(ratingchange, LocalizationUtils.Format(LocalizationKey.PRESS_KEY_TO_FINISH, AccessibleKey.CONFIRM));
+		AccessibilityMgr.Output(this, outputmessage1);
+		AccessibilityMgr.Output(this, outputmessage2);
+    }
+
     private void ReadPlayMenu()
     {
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadPlayMenu");
 		m_curAccessibleState = AccessibleState.READING_PLAY_MENU;
 		m_stateAfterVO = AccessibleState.READING_PLAY_MENU;
 
@@ -3331,15 +3591,20 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
     private void ReadDeck()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadDeck - previous AccessibleState: "+m_curAccessibleState);
 		if (m_dungeonCrawlDeckTray == null || m_dungeonCrawlDeckTray.m_deck == null || m_dungeonCrawlDeckTray.m_deck.GetCards().Count == 0)
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadDeck - if null: "+m_curAccessibleState);
 			AccessibilityMgr.Output(this, LocalizationUtils.Get(LocalizationKey.SCREEN_ADVENTURE_SCREEN_CANT_READ_DECK));
 			return;
 		}
 
+		m_prevAccessibleState = m_curAccessibleState; // return to the previous state, e.g. choosing loot
 		m_curAccessibleState = AccessibleState.READING_DECK;
 
 		var cards = m_dungeonCrawlDeck.GetDeckContents();
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadDeck - cards: "+cards);
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadDeck - cards.Count: "+cards.Cards.Count);
 
 		var accessibleCards = new List<AccessibleCollectibleCard>(cards.Cards.Count);
 
@@ -3355,6 +3620,7 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 			var accessibleCollectibleCard = new AccessibleCollectibleCard(this, collectibleCard, true);
 
 			accessibleCards.Add(accessibleCollectibleCard);
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadDeck - card in list: "+entityDef.GetName());
         }
 
 		m_accessibleDeckTray = new AccessibleListOfItems<AccessibleCollectibleCard>(this, accessibleCards);
@@ -3363,65 +3629,386 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 
     private bool SupportedAdventure()
     {
-		return m_dungeonCrawlData.GetSelectedAdventure() == AdventureDbId.BOH||m_dungeonCrawlData.GetSelectedAdventure() == AdventureDbId.BOM;
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl SupportedAdventure");
+		//Log.Accessibility.PrintInfo(m_dungeonCrawlData.GetSelectedAdventure().ToString()); //currently: PVPDR_DEATH_KNIGHT
+		return m_dungeonCrawlData.GetSelectedAdventure() == AdventureDbId.BOH||m_dungeonCrawlData.GetSelectedAdventure() == AdventureDbId.BOM||m_dungeonCrawlData.GetSelectedAdventure() == AdventureDbId.PVPDR_DEATH_KNIGHT;
     }
 
+	private void ChooseHeroPower()
+	{
+		Log.Accessibility.PrintInfo("AdventureDungeonCrawlDisplay.ChooseHeroPower()");
+		m_AccessibleHeroPower = new AccessibleHorizontalMenu<AccessibleArenaDraftCard>(this, GameStrings.Get("GLUE_ADVENTURE_DUNGEON_CRAWL_CHOOSE_HERO_POWER"), () => m_BackButton.TriggerRelease());
+		foreach (var HeroPower in m_playMat.m_heroPowerOptions)
+		{
+			Log.Accessibility.PrintInfo("AdventureDungeonCrawlDisplay.HeroPower.GetEntityDef()"+HeroPower.GetEntityDef().ToString());
+			m_AccessibleHeroPower.AddOption(new AccessibleArenaDraftCard(this, HeroPower.GetEntityDef()), () => HeroPower.Select());
+		}
+		m_curAccessibleState = AccessibleState.CHOOSING_HERO_POWER;
+		m_AccessibleHeroPower.StartReading();
+	}
+	private void ChooseTreasure()
+	{
+		Log.Accessibility.PrintInfo("AdventureDungeonCrawlDisplay.ChooseTreasure()");
+		m_AccessibleTreasure = new AccessibleHorizontalMenu<AccessibleArenaDraftCard>(this, GameStrings.Get("GLUE_ADVENTURE_DUNGEON_CRAWL_CHOOSE_TREASURE_SATCHEL"), () => m_BackButton.TriggerRelease());
+		foreach (var Treasure in m_playMat.m_treasureSatchelOptions)
+		{
+			m_AccessibleTreasure.AddOption(new AccessibleArenaDraftCard(this, Treasure.GetEntityDef()), () => Treasure.Select());
+		}
+		m_curAccessibleState = AccessibleState.CHOOSING_TREASURE;
+		m_AccessibleTreasure.StartReading();
+	}
+
+	private void ChooseTreasureReward()
+	{
+		Log.Accessibility.PrintInfo("I'm in AdventureDungeonCrawlDisplay.ChooseTreasureReward()"+m_playMat.m_rewardOptions);
+		m_AccessibleTreasureReward = new AccessibleHorizontalMenu<AccessibleArenaDraftCard>(this, GameStrings.Get("GLUE_ADVENTURE_DUNGEON_CRAWL_CHOOSE_TREASURE"), () => m_BackButton.TriggerRelease());
+
+		foreach (var TreasureReward in m_playMat.m_rewardOptions)
+		{
+			var TreasureDatabaseID = TreasureReward.GetTreasureDatabaseID();
+			var TreasureOptionEntity = DefLoader.Get().GetEntityDef(TreasureDatabaseID);
+			m_AccessibleTreasureReward.AddOption(new AccessibleArenaDraftCard(this, TreasureOptionEntity), () => TreasureReward.m_chooseButton.TriggerRelease());
+		}
+		m_curAccessibleState = AccessibleState.CHOOSING_TREASURE_REWARD;
+		m_AccessibleTreasureReward.StartReading();
+	}
+
+
+	private void ChooseLoot() // todo-loot List<long> classLootOptionsA, List<long> classLootOptionsB, List<long> classLootOptionsC // äää
+	{
+		readFirstTime = 0;
+		m_curAccessibleState = AccessibleState.CHOOSING_LOOT;
+		Log.Accessibility.PrintInfo("AdventureDungeonCrawlDisplay.ChooseLoot()");
+
+		List<long> LootOptionsA = null;
+		List<long> LootOptionsB = null;
+		List<long> LootOptionsC = null;
+		GameSaveDataManager.Get().GetSubkeyValue(m_gameSaveDataServerKey, GameSaveKeySubkeyId.DUNGEON_CRAWL_LOOT_OPTION_A, out LootOptionsA);
+		GameSaveDataManager.Get().GetSubkeyValue(m_gameSaveDataServerKey, GameSaveKeySubkeyId.DUNGEON_CRAWL_LOOT_OPTION_B, out LootOptionsB);
+		GameSaveDataManager.Get().GetSubkeyValue(m_gameSaveDataServerKey, GameSaveKeySubkeyId.DUNGEON_CRAWL_LOOT_OPTION_C, out LootOptionsC);
+
+		AccessibilityMgr.SetScreen(this);
+		AccessibilityMgr.Output(this, GameStrings.Get("GLUE_ADVENTURE_DUNGEON_CRAWL_CHOOSE_LOOT"));
+		
+		// create 3 loot crates, only read the first when entering the menu
+		for (int i = 0; i < LootOptionsA.Count; i++)
+		{
+			var Item = DefLoader.Get().GetEntityDef((int)LootOptionsA[i]);
+			var ItemID = Item.GetCardId();
+			var ItemTitle = Item.GetName();
+			var TitleString = "1!" + ItemTitle; 
+			if (i == 0) {
+				Log.Accessibility.PrintInfo("A: i == 0: "+TitleString);
+				m_AccessibleLootA = new AccessibleHorizontalMenu<AccessibleArenaDraftCard>(this, TitleString, null); //
+			}
+			else {
+				Log.Accessibility.PrintInfo("A: i != 0: "+ItemTitle);
+				AccessibleArenaDraftCard newCard=new AccessibleArenaDraftCard(null, Item);
+                m_AccessibleLootA.AddOption(newCard,null);
+			}
+		}
+		//m_AccessibleLootA.StartReading();
+
+		for (int i = 0; i < LootOptionsB.Count; i++)
+		{
+			var Item = DefLoader.Get().GetEntityDef((int)LootOptionsB[i]);
+			var ItemID = Item.GetCardId();
+			var ItemTitle = Item.GetName();
+			var TitleString = "2!" + ItemTitle;
+			if (i == 0) {
+				Log.Accessibility.PrintInfo("B: i == 0: "+TitleString);
+				m_AccessibleLootB = new AccessibleHorizontalMenu<AccessibleArenaDraftCard>(this, TitleString, null);
+			}
+			else {
+				Log.Accessibility.PrintInfo("B: i != 0: "+ItemTitle);
+				AccessibleArenaDraftCard newCard=new AccessibleArenaDraftCard(null, Item);
+                m_AccessibleLootB.AddOption(newCard,null);
+			}
+		}
+		//m_AccessibleLootB.StartReading();
+
+		for (int i = 0; i < LootOptionsC.Count; i++)
+		{
+			var Item = DefLoader.Get().GetEntityDef((int)LootOptionsC[i]);
+			var ItemID = Item.GetCardId();
+			var ItemTitle = Item.GetName();
+			var TitleString = "3!" + ItemTitle;
+			if (i == 0) {
+				Log.Accessibility.PrintInfo("C: i == 0: "+TitleString);
+				m_AccessibleLootC = new AccessibleHorizontalMenu<AccessibleArenaDraftCard>(this, TitleString, null);
+			}
+			else {
+				Log.Accessibility.PrintInfo("C: i != 0: "+ItemTitle);
+				AccessibleArenaDraftCard newCard=new AccessibleArenaDraftCard(null, Item);
+                m_AccessibleLootC.AddOption(newCard,null);
+			}
+		}
+		//m_AccessibleLootC.StartReading();
+		
+	}
+
+
+	private void ReadDuelsMenu()
+	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl ReadDuelsMenu");
+		m_curAccessibleState = AccessibleState.READING_DUELS_MENU;
+		//m_stateAfterVO = AccessibleState.READING_DUELS_MENU;
+
+		/*Log.Accessibility.PrintInfo("IsDeckBuilt2: "+ IsDeckBuilt);
+		if (IsDeckBuilt)
+		{
+			m_playMat.m_playButton.m_newPlayButtonText.SetText("GLOBAL_PLAY");
+		}*/
+
+		try {
+			m_curAccessibleState = AccessibleState.READING_DUELS_MENU;
+			m_duelsMenu = new AccessibleMenu(this, GameStrings.Get("GLUE_PVPDR"), () => m_BackButton.TriggerRelease());
+			m_duelsMenu.AddOption(GameStrings.Get(m_playMat.m_playButton.m_newPlayButtonText.Text), m_playMat.ClickPlayButton);
+			m_duelsMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_ADVENTURE_SCREEN_ADVENTURE_MENU_READ_DECK_OPTION), ReadDeck);
+			m_duelsMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_DUELS_READ_STATS), OnReadStats);
+			if (m_adventureDataRecord.DungeonCrawlIsRetireSupported)
+			{
+				m_duelsMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_ADVENTURE_SCREEN_ADVENTURE_MENU_RETIRE_OPTION), () => RetireFromAdventure());
+			}
+			m_duelsMenu.AddOption(GameStrings.Get("GLOBAL_BACK"), () => m_BackButton.TriggerRelease());
+			m_duelsMenu.StartReading();
+		}
+		catch (Exception e)
+		{
+			Log.Accessibility.PrintInfo("ReadDuelsMenu Exception");
+			AccessibilityUtils.LogFatalError(e);
+		}
+	}
+
     public void HandleInput()
     {
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HandleInput - m_playMat.GetPlayMatState(): "+m_playMat.GetPlayMatState());
+
 		// Wait for VO to finish
 		if (NotificationManager.Get().IsQuotePlaying)
-        {
+		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HandleInput IsQuotePlaying");
 			m_curAccessibleState = AccessibleState.IS_VO_PLAYING;
 
 			if (AccessibleKey.SKIP_NOTIFICATION.IsPressed())
-            {
+			{
 				NotificationManager.Get().m_quote.clickOff?.TriggerPress();
-            }
+			}
 			return;
-        }
+		}
 		else if (m_curAccessibleState == AccessibleState.IS_VO_PLAYING)
-        {
+		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HandleInput IS_VO_PLAYING");
 			if (m_stateAfterVO == AccessibleState.RUN_COMPLETED)
-            {
+			{
 				ReadCompletedScreen();
-            }
+			}
 			else
-            {
-                // Repeat menu
-                ReadPlayMenu();
-            }
-
-            return;
-        }
+			{
+				// Repeat menu
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl HandleInput else ReadPlayMenu");
+				ReadPlayMenu();
+			}
+			return;
+		}
 
 		// Normal flow
+		Log.Accessibility.PrintInfo("m_curAccessibleState: "+m_curAccessibleState.ToString());
 		if (m_curAccessibleState == AccessibleState.READING_PLAY_MENU)
-        {
-            m_accessibleMenu.HandleAccessibleInput();
-        }
+		{
+			Log.Accessibility.PrintInfo("I'm in AccessibleState.READING_PLAY_MENU");
+			m_accessibleMenu.HandleAccessibleInput();
+		}
 		else if (m_curAccessibleState == AccessibleState.READING_DECK)
-        {
+		{
 			if (AccessibleKey.BACK.IsPressed())
-            {
-				m_accessibleMenu.StartReading();
-				m_curAccessibleState = AccessibleState.READING_PLAY_MENU;
-            }
+			{
+				Log.Accessibility.PrintInfo("I'm in AccessibleKey.BACK.IsPressed()");
+				if (IsDuels())
+				{
+					Log.Accessibility.PrintInfo("I'm in IF Duels"); // ööö
+					if (m_prevAccessibleState == AccessibleState.CHOOSING_TREASURE_REWARD)
+					{
+						ChooseTreasureReward();
+						m_curAccessibleState = AccessibleState.CHOOSING_TREASURE_REWARD;
+						
+					}
+					else if (m_prevAccessibleState == AccessibleState.CHOOSING_LOOT)
+					{
+						ChooseLoot();
+						m_curAccessibleState = AccessibleState.CHOOSING_LOOT;
+						
+					}
+					else{
+						m_duelsMenu.StartReading();
+						m_curAccessibleState = AccessibleState.READING_DUELS_MENU;
+					}
+				}
+				else {
+					Log.Accessibility.PrintInfo("I'm in IF Play Menu");
+					m_accessibleMenu.StartReading();
+					m_curAccessibleState = AccessibleState.READING_PLAY_MENU;
+				}
+			}
 			else
-            {
+			{
+				Log.Accessibility.PrintInfo("I'm in READING_DECK else");
 				m_accessibleDeckTray.HandleAccessibleInput();
-
 				var curCardIdx = m_accessibleDeckTray.GetItemBeingReadIndex();
 				var cardTiles = m_dungeonCrawlDeckTray.GetCardsContent().GetCardTiles();
 				AccessibleInputMgr.MoveMouseTo(cardTiles[curCardIdx]);
-            }
-        }
+			}
+		}
+		else if (m_curAccessibleState == AccessibleState.READING_STATS)
+		{
+			if (AccessibleKey.BACK.IsPressed())
+			{
+				ReadDuelsMenu();
+				m_curAccessibleState = AccessibleState.READING_DUELS_MENU;
+			}
+			else
+			{
+				m_accessibleStats?.HandleAccessibleInput();
+			}
+		}
+		else if (m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.TRANSITIONING_FROM_PREV_STATE && IsTreasureRewardChosen == true )
+		{
+			Log.Accessibility.PrintInfo("I'm in AccessibleState.READING_DUELS_MENU - after chosen loot crate read duels menu again");
+			m_curAccessibleState = AccessibleState.READING_DUELS_MENU; // after chosen loot crate read duels menu again -- todo not needed after first treasure -- but it reads main menu?!
+		}
 		else if (m_curAccessibleState == AccessibleState.RUN_COMPLETED)
-        {
+		{
+			PvPDungeonRunScene.IsRetired = true; // close the popup when returning to DungeonRun
+			Log.Accessibility.PrintInfo("I'm in AccessibleState.RUN_COMPLETED");
 			if (AccessibleKey.CONFIRM.IsPressed())
-            {
+			{
+				Log.Accessibility.PrintInfo("I'm in CONFIRM.IsPressed()");
+				//PvPDungeonRunScene.IsRetired = false; // next run
+				OnSessionEndComplete();
+			}
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_HERO_POWER)
+		{
+			m_AccessibleHeroPower.HandleAccessibleInput();
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_TREASURE)
+		{
+			m_AccessibleTreasure.HandleAccessibleInput();
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_TREASURE_REWARD)
+		{
+			if (AccessibleKey.READ_DECK.IsPressed())
+			{
+				ReadDeck();
+				//m_accessibleDeckTray.StartReading(); // don't read first card twice
+				m_curAccessibleState = AccessibleState.READING_DECK;
+			}
+			else
+			{
+				m_AccessibleTreasureReward.HandleAccessibleInput();
+			}
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_LOOT) // äää
+		{
+			readFirstTime += 1;
+			Log.Accessibility.PrintInfo("I'm in HandleInput else if (m_curAccessibleState == AccessibleState.CHOOSING_LOOT) + "+readFirstTime);
+
+			if (AccessibleKey.READ_LOOT_BACKWARDS.IsPressed())
+			{
+				Log.Accessibility.PrintInfo("READ_LOOT_BACKWARDS");
+				LootToRead = LootToRead - 1;
+				if (LootToRead < 0)
+				{
+					LootToRead = 2;
+				}
+				readFirstTime = 0;
+			}
+			else if (AccessibleKey.READ_LOOT_FORWARDS.IsPressed())
+			{
+				Log.Accessibility.PrintInfo("READ_LOOT_FORWARDS");
+				LootToRead = LootToRead + 1;
+				if (LootToRead > 2)
+				{
+					LootToRead = 0;
+				}
+				readFirstTime = 0;
+			}
+			else if (AccessibleKey.TAKE_LOOT.IsPressed() || AccessibleKey.TAKE_LOOT_ALT.IsPressed())
+			{
+				Log.Accessibility.PrintInfo("TAKE_LOOT Key");
+				m_curAccessibleState = AccessibleState.READING_DUELS_MENU; 
+				m_playMat.m_rewardOptions[LootToRead].m_chooseButton.TriggerRelease();
+				ReadDuelsMenu(); // read play menu again after choosing treasure
+				LootToRead = 0; // read first loot crate again in next run, not the one we took
+				return; 
+			}
+			else if (AccessibleKey.GLOBAL_BACK.IsPressed()) 
+			{
 				m_BackButton.TriggerRelease();
-            }
-        }
+			}
+			else if (AccessibleKey.READ_DECK.IsPressed())
+			{
+				Log.Accessibility.PrintInfo("x.READ_LOOT number: "+LootToRead);
+				ReadDeck();
+				//m_accessibleDeckTray.StartReading(); // don't read the first card twice
+				m_curAccessibleState = AccessibleState.READING_DECK;				
+			}
+
+
+			Log.Accessibility.PrintInfo("READ_LOOT number: "+LootToRead);
+			switch (LootToRead)
+			{
+				case 0:
+					Log.Accessibility.PrintInfo("I'm in HandleInput LootA + "+readFirstTime);
+					if (readFirstTime == 1) 
+					{
+						m_AccessibleLootA?.StartReading();
+					}
+					m_AccessibleLootA.HandleAccessibleInput();
+					break;
+				case 1:
+					Log.Accessibility.PrintInfo("I'm in HandleInput LootB + "+readFirstTime);
+					if (readFirstTime == 1) 
+					{
+						m_AccessibleLootB?.StartReading();
+					}
+					m_AccessibleLootB.HandleAccessibleInput();
+					break;
+				case 2:
+					Log.Accessibility.PrintInfo("I'm in HandleInput LootC + "+readFirstTime);
+					if (readFirstTime == 1) 
+					{
+						m_AccessibleLootC?.StartReading();
+					}
+					m_AccessibleLootC.HandleAccessibleInput();
+					break;
+			}
+		}
+		else if (m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.PVPDR_ACTIVE)
+		{
+			Log.Accessibility.PrintInfo("I'm in GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.PVPDR_ACTIVE");
+			if (IsDuels())
+			{
+				Log.Accessibility.PrintInfo("I'm in m_duelsMenu.HandleAccessibleInput()");
+				m_duelsMenu.HandleAccessibleInput();
+			}
+			else {
+				m_accessibleMenu.HandleAccessibleInput();
+			}
+		}
+		else if (m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.SHOWING_OPTIONS)
+		{
+			Log.Accessibility.PrintInfo("I'm in else if (m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.SHOWING_OPTIONS)");
+			if (IsTreasureRewardChosen == true)
+			{
+				Log.Accessibility.PrintInfo("I'm in IsTreasureRewardChosen == true");
+				ChooseLoot();
+			}
+			else {
+				Log.Accessibility.PrintInfo("I'm in IsTreasureRewardChosen == false");
+				ChooseTreasureReward();
+			}
+		}
     }
 
     public string GetHelp()
@@ -3430,6 +4017,21 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
         {
 			return m_accessibleMenu.GetHelp();
         }
+		else if (m_curAccessibleState == AccessibleState.READING_DUELS_MENU)
+        {
+			return m_duelsMenu.GetHelp();
+        }
+
+		if (m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.PVPDR_ACTIVE)
+		{
+			if(IsDuels())
+			{
+				return m_duelsMenu.GetHelp();
+			}
+			else {
+				return m_accessibleMenu.GetHelp();
+			}
+		}
 		else if (m_curAccessibleState == AccessibleState.RUN_COMPLETED)
         {
 			return GetAdventureCompleteSpeech();
@@ -3444,23 +4046,92 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
 			return LocalizationUtils.Get(LocalizationKey.SCREEN_ADVENTURE_SCREEN_WAITING_FOR_VO_HELP);
         }
 
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_HERO_POWER)
+		{
+			return m_AccessibleHeroPower.GetHelp();
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_TREASURE)
+		{
+			return m_AccessibleTreasure.GetHelp();
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_TREASURE_REWARD)
+		{
+			return m_AccessibleTreasureReward.GetHelp();
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_LOOT)
+		{
+			return m_AccessibleLoot.GetHelp();
+		}
+		else if (m_curAccessibleState == AccessibleState.READING_STATS)
+		{
+			return AccessibleSpeech.PRESS_BACK_TO_GO_BACK;
+		}
 		return "";
     }
 
     public void OnGainedFocus()
     {
+		Log.Accessibility.PrintInfo("m_curAccessibleState: "+m_curAccessibleState.ToString());
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus");
 		if (m_curAccessibleState == AccessibleState.READING_PLAY_MENU)
         {
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus m_accessibleMenu.StartReading() 1");
 			m_accessibleMenu.StartReading();
         }
+		else if(m_curAccessibleState == AccessibleState.CHOOSING_HERO_POWER)
+		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus AccessibleState.CHOOSING_HERO_POWER");
+			m_AccessibleHeroPower.StartReading();
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_TREASURE)
+		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus AccessibleState.CHOOSING_TREASURE");
+			m_AccessibleTreasure.StartReading();
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_TREASURE_REWARD)
+		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus AccessibleState.CHOOSING_TREASURE_REWARD");
+			m_AccessibleTreasureReward.StartReading();
+		}
+		else if (m_curAccessibleState == AccessibleState.CHOOSING_LOOT)
+		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus AccessibleState.CHOOSING_LOOT");
+			m_AccessibleLoot.StartReading();
+		}
+		else if (m_curAccessibleState == AccessibleState.READING_STATS)
+		{
+			m_accessibleStats.ReadAllLines();
+		}
+		else if (m_curAccessibleState == AccessibleState.READING_DUELS_MENU)
+        {
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus m_duelsMenu.StartReading() 1");
+			//m_duelsMenu.StartReading();
+			ReadDuelsMenu(); // refresh menu for play button to be updated
+        }
+		else if (m_playMat.GetPlayMatState() == AdventureDungeonCrawlPlayMat.PlayMatState.PVPDR_ACTIVE)
+		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus m_playMat.GetPlayMatState()");
+			if (IsDuels() && m_curAccessibleState != AccessibleState.RUN_COMPLETED)
+			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus m_duelsMenu.StartReading 2");
+				m_duelsMenu?.StartReading();
+			}
+			else {
+				Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus m_accessibleMenu.StartReading 2");
+				m_accessibleMenu?.StartReading();
+			}
+		}
 		else
         {
+			Log.Accessibility.PrintInfo("I'm now in DungeonCrawl OnGainedFocus else AccessibilityMgr.Output");
             AccessibilityMgr.Output(this, LocalizationUtils.Get(LocalizationKey.SCREEN_ADVENTURE_SCREEN_TITLE));
         }
     }
 
     private void RetireFromAdventure()
     {
+		m_curAccessibleState = AccessibleState.RUN_COMPLETED;
+		Log.Accessibility.PrintInfo("I'm now in DungeonCrawl RetireFromAdventure");
         m_retireButton.SetActive(value: false);
         AlertPopup.PopupInfo popupInfo = new AlertPopup.PopupInfo
         {
@@ -3481,5 +4152,49 @@ public class AdventureDungeonCrawlDisplay : MonoBehaviour, AccessibleScreen
         DialogManager.Get().ShowPopup(popupInfo);
     }
 
+	public Boolean IsDuels()
+	{
+			if (m_dungeonCrawlData.GetSelectedAdventure() == AdventureDbId.PVPDR_DEATH_KNIGHT)
+			{
+				return true;
+			}
+			else {
+				return false;
+			}
+	}
+
+	private void OnReadStats()
+	{
+		PVPDRLobbyDataModel pVPDRLobbyDataModel = PvPDungeonRunDisplay.Get().GetPVPDRLobbyDataModel();
+		TAG_CLASS tagClassFromCardDbId = GameUtils.GetTagClassFromCardDbId((int)m_dungeonCrawlData.SelectedHeroCardDbId);
+
+		var WinsCount = pVPDRLobbyDataModel.Wins;
+		var LossesCount = pVPDRLobbyDataModel.Losses;
+		var LivesLeft = 3 - LossesCount;
+		var TotalWinsCount = GetBossWinsForClass(tagClassFromCardDbId);
+		var HeroName = DefLoader.Get().GetEntityDef((int)m_dungeonCrawlData.SelectedHeroCardDbId).GetName();
+
+		Log.Accessibility.PrintInfo("Losses: "+pVPDRLobbyDataModel.Losses);
+		Log.Accessibility.PrintInfo("Wins: "+pVPDRLobbyDataModel.Wins);
+		Log.Accessibility.PrintInfo("LivesLeft: "+LivesLeft.ToString());
+		Log.Accessibility.PrintInfo("HighWatermark (total wins per class): "+pVPDRLobbyDataModel.HighWatermark);
+		Log.Accessibility.PrintInfo("tagClassFromCardDbId: "+tagClassFromCardDbId);
+		Log.Accessibility.PrintInfo("GetBossWinsForClass: "+GetBossWinsForClass(tagClassFromCardDbId));
+		Log.Accessibility.PrintInfo("GetRunWinsForClass: "+GetRunWinsForClass(tagClassFromCardDbId));
+
+		var lines = new List<string>();
+		lines.Add(AccessibleSpeechUtils.CombineWordsWithColon(GameStrings.Get("GLUE_PVPDR_LABEL_VAULT_WINS"), $"{WinsCount}"));
+		lines.Add(AccessibleSpeechUtils.CombineWordsWithColon(GameStrings.Get("GLUE_LOSSES"), $"{LossesCount}"));
+		//lines.Add(AccessibleSpeechUtils.CombineWordsWithColon(LocalizationUtils.Get(LocalizationKey.SCREEN_DUELS_LOSSES_COUNT), $"{LossesCount}"));
+		//lines.Add(AccessibleSpeechUtils.CombineWordsWithColon(GameStrings.Get("GLUE_PVPDR_LABEL_VAULT_LIVES"), $"{LivesLeft}"));
+		lines.Add(AccessibleSpeechUtils.CombineWordsWithColon(GameStrings.Format("GLUE_PVPDR_BEST_WINS_AS_CLASS", HeroName), $"{TotalWinsCount}"));
+		//lines.Add(AccessibleSpeech.PRESS_BACK_TO_GO_BACK);
+		m_accessibleStats = new AccessibleMultilineText(this, lines);
+		m_accessibleStats.ReadAllLines();
+		m_curAccessibleState = AccessibleState.READING_STATS;
+		Log.Accessibility.PrintInfo("I'm now in state READING_STATS in OnReadStats");
+
+	}
+
     #endregion
 }
diff --git a/Assembly-CSharp/AdventureDungeonCrawlHeroPowerOption.cs b/Assembly-CSharp/AdventureDungeonCrawlHeroPowerOption.cs
index 2f707c3..71f81ac 100644
--- a/Assembly-CSharp/AdventureDungeonCrawlHeroPowerOption.cs
+++ b/Assembly-CSharp/AdventureDungeonCrawlHeroPowerOption.cs
@@ -149,4 +149,10 @@ public class AdventureDungeonCrawlHeroPowerOption : AdventureOptionWidget
 			}
 		}
 	}
+	#region Accessibility
+    internal EntityDef GetEntityDef()
+    {
+        return DefLoader.Get().GetEntityDef((int)m_databaseId);
+    }
+    #endregion
 }
diff --git a/Assembly-CSharp/AdventureDungeonCrawlPlayMat.cs b/Assembly-CSharp/AdventureDungeonCrawlPlayMat.cs
index 8702c10..2a77172 100644
--- a/Assembly-CSharp/AdventureDungeonCrawlPlayMat.cs
+++ b/Assembly-CSharp/AdventureDungeonCrawlPlayMat.cs
@@ -256,9 +256,9 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private List<GameObject> m_cardBacks = new List<GameObject>();
 
-	private PlayButton m_playButton;
+	internal PlayButton m_playButton;
 
-	private List<AdventureDungeonCrawlRewardOption> m_rewardOptions;
+	internal List<AdventureDungeonCrawlRewardOption> m_rewardOptions;
 
 	private AdventureDungeonCrawlBossGraveyard m_bossGraveyard;
 
@@ -298,7 +298,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private string m_chooseLootHeaderStringOverride;
 
-	private List<AdventureDungeonCrawlTreasureOption> m_treasureSatchelOptions;
+	internal List<AdventureDungeonCrawlTreasureOption> m_treasureSatchelOptions;
 
 	public Widget m_treasureInspectWidget;
 
@@ -338,6 +338,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void Awake()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat Awake");
 		m_treasureSatchelReference.RegisterReadyListener<Widget>(OnTreasureSatchelReady);
 		m_treasureInspectReference.RegisterReadyListener<Widget>(OnTreasureInspectReady);
 		m_duelsPlayMatReference.RegisterReadyListener<DuelsPlayMat>(OnPVPDRPlayMatReady);
@@ -349,6 +350,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void Start()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat Start");
 		m_rewardOptions = new List<AdventureDungeonCrawlRewardOption>(m_rewardOptionNestedPrefabs.Count);
 		for (int i = 0; i < m_rewardOptionNestedPrefabs.Count; i++)
 		{
@@ -380,12 +382,14 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void OnDestroy()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnDestroy");
 		m_bossCardDef?.Dispose();
 		m_bossCardDef = null;
 	}
 
 	public void Initialize(IDungeonCrawlData data)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat Initialize");
 		m_dungeonCrawlData = data;
 		AdventureConfig.Get().GetAdventureDataModel().SelectedHeroId = GameUtils.TranslateDbIdToCardId((int)data.SelectedHeroCardDbId);
 		SetPlaymatVisualStyle();
@@ -399,6 +403,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void Update()
 	{
+		//Log.Accessibility.PrintInfo("I'm now in Mat Update");
 		if (m_playMatState != PlayMatState.TRANSITIONING_FROM_PREV_STATE)
 		{
 			return;
@@ -455,6 +460,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public bool IsReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat IsReady");
 		if (!m_startCallFinished)
 		{
 			return false;
@@ -473,6 +479,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetTreasureSatchelOptionSelectedCallback(AdventureDungeonCrawlTreasureOption.TreasureSelectedOptionCallback callback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetTreasureSatchelOptionSelectedCallback");
 		if (m_treasureSatchelReference == null)
 		{
 			Debug.LogError("AdventureDungeonCrawlPlayMat.SetTreasureSatchelOptionSelectedCallback - m_treasureSatchelReference was null!");
@@ -495,6 +502,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetDeckOptionSelectedCallback(AdventureDungeonCrawlDeckOption.DeckOptionSelectedCallback callback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetDeckOptionSelectedCallback");
 		foreach (AdventureDungeonCrawlDeckOption deckOption in m_deckOptions)
 		{
 			deckOption.SetOptionCallbacks(callback);
@@ -503,6 +511,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetHeroPowerOptionCallback(AdventureDungeonCrawlHeroPowerOption.HeroPowerSelectedOptionCallback selectedCallback, AdventureDungeonCrawlHeroPowerOption.HeroPowerHoverOptionCallback rolloverCallback, AdventureDungeonCrawlHeroPowerOption.HeroPowerHoverOptionCallback rolloutCallback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetHeroPowerOptionCallback");
 		foreach (AdventureDungeonCrawlHeroPowerOption heroPowerOption in m_heroPowerOptions)
 		{
 			heroPowerOption.SetOptionCallbacks(selectedCallback, rolloverCallback, rolloutCallback);
@@ -511,6 +520,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetRewardOptionSelectedCallback(RewardOptionSelectedCallback callback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetRewardOptionSelectedCallback");
 		foreach (AdventureDungeonCrawlRewardOption rewardOption in m_rewardOptions)
 		{
 			rewardOption.SetOptionChosenCallback(delegate
@@ -522,6 +532,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void DeselectAllDeckOptionsWithoutId(int deckId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat DeselectAllDeckOptionsWithoutId");
 		foreach (AdventureDungeonCrawlDeckOption deckOption in m_deckOptions)
 		{
 			if (deckOption.DeckId != deckId)
@@ -533,6 +544,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetBossActor(Actor bossActor)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetBossActor");
 		m_bossActor = bossActor;
 		if (m_bossActor != null && m_bossCardDef != null && m_bossEntityDef != null)
 		{
@@ -542,6 +554,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetBossFullDef(DefLoader.DisposableCardDef cardDef, EntityDef entityDef)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetBossFullDef");
 		m_bossCardDef?.Dispose();
 		m_bossCardDef = cardDef;
 		m_bossEntityDef = entityDef;
@@ -553,6 +566,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void SetUpBossCard()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetUpBossCard");
 		if (m_bossActor == null)
 		{
 			Log.Adventures.PrintError("AdventureDungeonCrawlDisplay.SetUpBossCard - m_BossActor is null!");
@@ -588,6 +602,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetCardBack(int cardBackId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetCardBack");
 		m_loadingCardback = true;
 		if (!CardBackManager.Get().LoadCardBackByIndex(cardBackId, OnCardBackLoaded))
 		{
@@ -598,11 +613,13 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetPlayerHeroDbId(int heroDbId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetPlayerHeroDbId");
 		m_playerHeroDbId = heroDbId;
 	}
 
 	private void OnCardBackLoaded(CardBackManager.LoadCardBackData cardbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnCardBackLoaded");
 		m_loadingCardback = false;
 		m_cardBack = cardbackData.m_CardBack;
 		if (m_bossActor != null)
@@ -626,6 +643,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetUpDefeatedBosses(List<long> defeatedBossIds, int bossesPerRun)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetUpDefeatedBosses");
 		if (m_setUpDefeatedBossesCompleted)
 		{
 			Debug.LogError("Calling SetUpDefeatedBosses, when this has already been called! Please investigate - you should not be doing this!");
@@ -686,11 +704,13 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void SetUpCardBacks(int numUndefeatedBosses, AssetLoadCompletedCallback callback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetUpCardBacks");
 		StartCoroutine(SetUpCardBacksWhenReady(numUndefeatedBosses, callback));
 	}
 
 	private IEnumerator SetUpCardBacksWhenReady(int numUndefeatedBosses, AssetLoadCompletedCallback callback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetUpCardBacksWhenReady");
 		while (m_loadingCardback)
 		{
 			yield return null;
@@ -725,6 +745,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void SetUpPlayButton()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetUpPlayButton");
 		if ((bool)UniversalInputManager.UsePhoneUI && m_MobilePlayButtonSlidingTrayBone != null)
 		{
 			GameUtils.SetParent(m_PlayButtonRoot, m_MobilePlayButtonSlidingTrayBone);
@@ -734,6 +755,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void EnablePlayButton(bool enabled)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat EnablePlayButton");
 		if (enabled)
 		{
 			m_playButton.Enable();
@@ -750,6 +772,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void ShowTreasureOptions(List<long> treasureOptions)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowTreasureOptions");
 		if (treasureOptions == null || treasureOptions.Count == 0)
 		{
 			Log.Adventures.PrintWarning("AdventureDungeonCrawlPlayMat - Attempting to show Treasure, but no treasure was passed in!");
@@ -769,6 +792,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void ShowLootOptions(List<long> classLootOptionsA, List<long> classLootOptionsB, List<long> classLootOptionsC)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowLootOptions");
 		if ((classLootOptionsA == null || classLootOptionsA.Count == 0) && (classLootOptionsB == null || classLootOptionsB.Count == 0) && (classLootOptionsC == null || classLootOptionsC.Count == 0))
 		{
 			Log.Adventures.PrintWarning("AdventureDungeonCrawlPlayMat - Attempting to show Loot, but no loot was passed in!");
@@ -791,6 +815,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void ShowShrineOptions(List<long> shrineOptions)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowShrineOptions");
 		m_currentOptionType = OptionType.SHRINE_TREASURE;
 		SetPlayMatState(PlayMatState.SHOWING_OPTIONS, setAsInitialized: false);
 		if (shrineOptions == null || shrineOptions.Count == 0)
@@ -807,6 +832,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void ShowTreasureSatchel(List<AdventureLoadoutTreasuresDbfRecord> adventureLoadoutTreasures, GameSaveKeyId adventureGameSaveServerKey, GameSaveKeyId adventureGameSaveClientKey)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowTreasureSatchel");
 		if (m_treasureSatchelWidget == null)
 		{
 			Debug.LogError("AdventureDungeonCrawlPlayMat.ShowTreasureSatchel - m_treasureSatchel is null!");
@@ -821,6 +847,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private IEnumerator ShowTreasureSatchelWhenReady(List<AdventureLoadoutTreasuresDbfRecord> adventureLoadoutTreasures, GameSaveKeyId adventureGameSaveServerKey, GameSaveKeyId adventureGameSaveClientKey)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowTreasureSatchelWhenReady");
 		while (!m_subsceneTransitionComplete || !m_treasureSatchelWidget.IsReady || m_treasureSatchelWidget.IsChangingStates)
 		{
 			yield return null;
@@ -925,6 +952,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void ShowHeroPowers(List<AdventureHeroPowerDbfRecord> adventureHeroPowers, GameSaveKeyId adventureGameSaveServerKey, GameSaveKeyId adventureGameSaveClientKey)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowHeroPowers");
 		m_currentOptionType = OptionType.HERO_POWER;
 		SetPlayMatState(PlayMatState.SHOWING_OPTIONS, setAsInitialized: false);
 		if (adventureHeroPowers.Count > m_heroPowerOptions.Count)
@@ -981,6 +1009,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void ShowDecks(List<AdventureDeckDbfRecord> adventureDecks, GameSaveKeyId adventureGameSaveServerKey, GameSaveKeyId adventureGameSaveClientKey)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowDecks");
 		m_currentOptionType = OptionType.DECK;
 		SetPlayMatState(PlayMatState.SHOWING_OPTIONS, setAsInitialized: false);
 		if (adventureDecks.Count > m_deckOptions.Count)
@@ -1031,12 +1060,14 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private GameSaveDataManager.AdventureDungeonCrawlWingProgressSubkeys WingProgressSubkeysForScenario(int scenarioId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat WingProgressSubkeysForScenario");
 		GameSaveDataManager.GetProgressSubkeysForDungeonCrawlWing(GameUtils.GetWingRecordFromMissionId(scenarioId), out var progressSubkeys);
 		return progressSubkeys;
 	}
 
 	private List<long> HeroPowerWinsForScenario(GameSaveKeyId adventureGameSaveServerKey, int scenarioId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat HeroPowerWinsForScenario");
 		GameSaveDataManager.AdventureDungeonCrawlWingProgressSubkeys adventureDungeonCrawlWingProgressSubkeys = WingProgressSubkeysForScenario(scenarioId);
 		if (adventureDungeonCrawlWingProgressSubkeys.heroPowerWins == (GameSaveKeySubkeyId)0)
 		{
@@ -1048,6 +1079,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private List<long> DeckWinsForScenario(GameSaveKeyId adventureGameSaveServerKey, int scenarioId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat DeckWinsForScenario");
 		GameSaveDataManager.AdventureDungeonCrawlWingProgressSubkeys adventureDungeonCrawlWingProgressSubkeys = WingProgressSubkeysForScenario(scenarioId);
 		if (adventureDungeonCrawlWingProgressSubkeys.deckWins == (GameSaveKeySubkeyId)0)
 		{
@@ -1059,6 +1091,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private List<long> TreasureWinsForScenario(GameSaveKeyId adventureGameSaveServerKey, int scenarioId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat TreasureWinsForScenario");
 		GameSaveDataManager.AdventureDungeonCrawlWingProgressSubkeys adventureDungeonCrawlWingProgressSubkeys = WingProgressSubkeysForScenario(scenarioId);
 		if (adventureDungeonCrawlWingProgressSubkeys.treasureWins == (GameSaveKeySubkeyId)0)
 		{
@@ -1070,38 +1103,45 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void ShowNextBoss(string playButtonText)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowNextBoss");
 		SetPlayMatState(PlayMatState.SHOWING_NEXT_BOSS, setAsInitialized: true);
 		m_playButton.SetText(playButtonText);
 	}
 
 	public void ShowEmptyState()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowEmptyState");
 		SetPlayMatState(PlayMatState.READY_FOR_DATA, setAsInitialized: true);
 	}
 
 	public void ShowPVPDRActiveRun(string playButtonText)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowPVPDRActiveRun");
 		SetPlayMatState(PlayMatState.PVPDR_ACTIVE, setAsInitialized: true);
 		m_playButton.SetText(playButtonText);
 	}
 
 	public void ShowPVPDRReward()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowPVPDRReward");
 		SetPlayMatState(PlayMatState.PVPDR_REWARD, setAsInitialized: true);
 	}
 
 	public void SetShouldShowBossHeroPowerTooltip(bool show)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetShouldShowBossHeroPowerTooltip");
 		m_shouldShowBossHeroPowerTooltip = show;
 	}
 
 	public void ShowBossHeroPowerTooltip()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowBossHeroPowerTooltip");
 		StartCoroutine(ShowBossHeroPowerTooltipWhenReady());
 	}
 
 	private IEnumerator ShowBossHeroPowerTooltipWhenReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowBossHeroPowerTooltipWhenReady");
 		yield return new WaitForSeconds(0.5f);
 		bool wasWaitingOnVO = false;
 		while (NotificationManager.Get().IsQuotePlaying)
@@ -1126,6 +1166,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void HideBossHeroPowerTooltip(bool immediate = false)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat HideBossHeroPowerTooltip");
 		m_shouldShowBossHeroPowerTooltip = false;
 		if (!(m_bossHeroPowerTooltip != null))
 		{
@@ -1147,16 +1188,20 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public PlayMatState GetPlayMatState()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat GetPlayMatState");
+		//Log.Accessibility.PrintInfo(m_playMatState.ToString());
 		return m_playMatState;
 	}
 
 	public OptionType GetPlayMatOptionType()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat GetPlayMatOptionType");
 		return m_currentOptionType;
 	}
 
 	private void SetPlayMatState(PlayMatState state, bool setAsInitialized)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetPlayMatState");
 		if (PlayMatState.TRANSITIONING_FROM_PREV_STATE == m_playMatState && state != 0)
 		{
 			Log.Adventures.PrintError("Attempting to set Adventure Dungeon Crawl Play Mat to state {0}, but still in state TRANSITIONING_FROM_PREV_STATE! This is not allowed!", state);
@@ -1191,6 +1236,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void SetPlayMatStateAsInitializedAndPlayTransition()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetPlayMatStateAsInitializedAndPlayTransition");
 		m_playMatStateInitialized = true;
 		if (m_subsceneTransitionComplete)
 		{
@@ -1200,6 +1246,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void SetHeaderTextForState(PlayMatState state)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetHeaderTextForState");
 		SetHeaderOverrideStrings();
 		m_headerText.Show();
 		switch (state)
@@ -1253,21 +1300,25 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void ShowRunEnd(List<long> defeatedBossIds, long bossWhoDefeatedMeId, int numTotalBosses, bool hasCompletedAdventureWithAllClasses, bool firstTimeCompletedAsClass, int numClassesCompleted, GameSaveKeyId adventureGameSaveDataServerKey, GameSaveKeyId adventureGameSaveDataClientKey, AssetLoadCompletedCallback loadCompletedCallback, AdventureDungeonCrawlBossGraveyard.RunEndSequenceCompletedCallback sequenceCompletedCallback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowRunEnd");
 		StartCoroutine(ShowRunEndAfterGraveyardIsInitialized(defeatedBossIds, bossWhoDefeatedMeId, numTotalBosses, hasCompletedAdventureWithAllClasses, firstTimeCompletedAsClass, numClassesCompleted, adventureGameSaveDataServerKey, adventureGameSaveDataClientKey, loadCompletedCallback, sequenceCompletedCallback));
 	}
 
 	public void OnSubSceneLoaded()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnSubSceneLoaded");
 		HideContentBeforeIntroAnims();
 	}
 
 	public void OnSubSceneTransitionComplete()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnSubSceneTransitionComplete");
 		StartCoroutine(ProcessSubsceneTransitionCompleteWhenReady());
 	}
 
 	private IEnumerator ProcessSubsceneTransitionCompleteWhenReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ProcessSubsceneTransitionCompleteWhenReady");
 		while (GameUtils.IsAnyTransitionActive() || PopupDisplayManager.Get().IsShowing)
 		{
 			yield return null;
@@ -1283,6 +1334,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void PlayRewardOptionSelected(AdventureDungeonCrawlRewardOption.OptionData optionData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayRewardOptionSelected");
 		SetPlayMatState(PlayMatState.TRANSITIONING_FROM_PREV_STATE, setAsInitialized: true);
 		for (int i = 0; i < m_rewardOptions.Count; i++)
 		{
@@ -1293,21 +1345,25 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void PlayDeckOptionSelected()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayDeckOptionSelected");
 		PlayWidgetOptionSelected(m_deckOptions.Cast<AdventureOptionWidget>());
 	}
 
 	public void PlayHeroPowerOptionSelected()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayHeroPowerOptionSelected");
 		PlayWidgetOptionSelected(m_heroPowerOptions.Cast<AdventureOptionWidget>());
 	}
 
 	public void PlayTreasureSatchelOptionSelected()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayTreasureSatchelOptionSelected");
 		PlayWidgetOptionSelected(m_treasureSatchelOptions.Cast<AdventureOptionWidget>());
 	}
 
 	public void PlayTreasureSatchelOptionHidden()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayTreasureSatchelOptionHidden");
 		PlayWidgetOptionSelected(m_treasureSatchelOptions.Cast<AdventureOptionWidget>());
 		if (m_treasureSatchelWidget != null)
 		{
@@ -1317,6 +1373,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void PlayWidgetOptionSelected(IEnumerable<AdventureOptionWidget> options)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayWidgetOptionSelected");
 		SetPlayMatState(PlayMatState.TRANSITIONING_FROM_PREV_STATE, setAsInitialized: true);
 		foreach (AdventureOptionWidget option in options)
 		{
@@ -1326,6 +1383,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public Actor GetActorToAnimateFrom(string cardId, int index)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat GetActorToAnimateFrom");
 		if (m_currentOptionType != OptionType.TREASURE_SATCHEL)
 		{
 			if (index < 0 || index > m_rewardOptions.Count)
@@ -1343,6 +1401,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void PlayStateTransition(PlayMatState state)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayStateTransition");
 		if (m_playMatStateInitialized)
 		{
 			switch (state)
@@ -1365,6 +1424,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private IEnumerator PlayNextBossAnimations(bool transitionFromPrevState)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayNextBossAnimations");
 		bool num = m_defeatedBossActors.Count == 0;
 		bool finalBoss = m_defeatedBossActors.Count == m_bossesPerRun - 1;
 		if (num)
@@ -1421,6 +1481,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void PlayNextBossVO()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayNextBossVO");
 		if (m_bossActor.GetEntityDef() != null)
 		{
 			WingDbId wingIdFromMissionId = GameUtils.GetWingIdFromMissionId(m_dungeonCrawlData.GetMission());
@@ -1434,6 +1495,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private IEnumerator HandleOptionIntroAnimations()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat HandleOptionIntroAnimations");
 		if (m_currentOptionType == OptionType.TREASURE || m_currentOptionType == OptionType.SHRINE_TREASURE)
 		{
 			yield return StartCoroutine(PlayRewardOptionAnimations(m_rewardOptions, 0f));
@@ -1469,6 +1531,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private IEnumerator PlayRewardOptionAnimations(IEnumerable<AdventureDungeonCrawlRewardOption> options, float dropDelay)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayRewardOptionAnimations");
 		HideContentBeforeIntroAnims();
 		yield return new WaitForSeconds(0.5f);
 		foreach (AdventureDungeonCrawlRewardOption option2 in options)
@@ -1505,6 +1568,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private IEnumerator PlayWidgetOptionAnimations(IEnumerable<AdventureOptionWidget> options, float dropDelay)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayWidgetOptionAnimations");
 		foreach (AdventureOptionWidget option2 in options)
 		{
 			while (!option2.IsReady)
@@ -1531,6 +1595,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void PlaySelectedOptionVO()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlaySelectedOptionVO");
 		if (m_currentOptionType == OptionType.TREASURE || m_currentOptionType == OptionType.SHRINE_TREASURE || m_currentOptionType == OptionType.TREASURE_SATCHEL)
 		{
 			PlayTreasureOfferVO();
@@ -1551,6 +1616,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void PlayTreasureOfferVO()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayTreasureOfferVO");
 		Options.Get().SetBool(Option.HAS_JUST_SEEN_LOOT_NO_TAKE_CANDLE_VO, val: false);
 		WingDbId wingIdFromMissionId = GameUtils.GetWingIdFromMissionId(m_dungeonCrawlData.GetMission());
 		if (DungeonCrawlSubDef_VOLines.PlayVOLine(m_dungeonCrawlData.GetSelectedAdventure(), wingIdFromMissionId, m_playerHeroDbId, DungeonCrawlSubDef_VOLines.OFFER_TREASURE_EVENTS))
@@ -1573,24 +1639,28 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void PlayLootPackOfferVO()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayLootPackOfferVO");
 		WingDbId wingIdFromMissionId = GameUtils.GetWingIdFromMissionId(m_dungeonCrawlData.GetMission());
 		DungeonCrawlSubDef_VOLines.PlayVOLine(m_dungeonCrawlData.GetSelectedAdventure(), wingIdFromMissionId, m_playerHeroDbId, DungeonCrawlSubDef_VOLines.OFFER_LOOT_PACKS_EVENTS);
 	}
 
 	private void PlayHeroPowerOfferVO()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayHeroPowerOfferVO");
 		WingDbId wingIdFromMissionId = GameUtils.GetWingIdFromMissionId(m_dungeonCrawlData.GetMission());
 		DungeonCrawlSubDef_VOLines.PlayVOLine(m_dungeonCrawlData.GetSelectedAdventure(), wingIdFromMissionId, m_playerHeroDbId, DungeonCrawlSubDef_VOLines.OFFER_HERO_POWER_EVENTS, (int)m_dungeonCrawlData.SelectedHeroPowerDbId);
 	}
 
 	private void PlayDeckOfferVO()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat PlayDeckOfferVO");
 		WingDbId wingIdFromMissionId = GameUtils.GetWingIdFromMissionId(m_dungeonCrawlData.GetMission());
 		DungeonCrawlSubDef_VOLines.PlayVOLine(m_dungeonCrawlData.GetSelectedAdventure(), wingIdFromMissionId, m_playerHeroDbId, DungeonCrawlSubDef_VOLines.OFFER_DECK_EVENTS, (int)m_dungeonCrawlData.SelectedDeckId);
 	}
 
 	private void HideContentBeforeIntroAnims()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat HideContentBeforeIntroAnims");
 		if (m_playMatState != PlayMatState.SHOWING_OPTIONS)
 		{
 			return;
@@ -1606,6 +1676,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private IEnumerator ShowRunEndAfterGraveyardIsInitialized(List<long> defeatedBossIds, long bossWhoDefeatedMeId, int numTotalBosses, bool hasCompletedAdventureWithAllClasses, bool firstTimeCompletedAsClass, int numClassesCompleted, GameSaveKeyId adventureGameSaveDataServerKey, GameSaveKeyId adventureGameSaveDataClientKey, AssetLoadCompletedCallback loadCompletedCallback, AdventureDungeonCrawlBossGraveyard.RunEndSequenceCompletedCallback sequenceCompletedCallback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat ShowRunEndAfterGraveyardIsInitialized");
 		SetPlayMatState(PlayMatState.SHOWING_BOSS_GRAVEYARD, setAsInitialized: false);
 		while (!m_bossGraveyardPane.PrefabIsLoaded() || m_paperController == null)
 		{
@@ -1630,6 +1701,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void SetPlaymatVisualStyle()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetPlaymatVisualStyle");
 		DungeonRunVisualStyle visualStyle = m_dungeonCrawlData.VisualStyle;
 		m_nextBossFlipSmallSFXOverride = m_nextBossFlipSmallSFXDefault;
 		m_nextBossFlipLargeSFXOverride = m_nextBossFlipLargeSFXDefault;
@@ -1693,6 +1765,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void SetHeaderOverrideStrings()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat SetHeaderOverrideStrings");
 		if (m_matchingPlaymatStyle == null)
 		{
 			return;
@@ -1719,6 +1792,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void OnPlayButtonReady(PlayButton playButton)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnPlayButtonReady");
 		if (playButton == null)
 		{
 			Error.AddDevWarning("UI Error!", "PlayButtonReference is null, or does not have a PlayButton component on it!");
@@ -1731,6 +1805,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void OnPaperControllerReady(VisualController paperController)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnPaperControllerReady");
 		if (paperController == null)
 		{
 			Error.AddDevWarning("UI Issue!", "PlayMat's m_paperControllerReference is null! Can't set the correct PlayMat texture!.");
@@ -1756,6 +1831,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void OnTreasureSatchelReady(Widget widget)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnTreasureSatchelReady");
 		if (widget == null)
 		{
 			Debug.LogError("AdventureDungeonCrawlPlayMat.OnTreasureSatchelReady - widget was null!");
@@ -1811,6 +1887,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void OnTreasureInspectReady(Widget widget)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnTreasureInspectReady");
 		if (widget == null)
 		{
 			Debug.LogError("AdventureDungeonCrawlPlayMat.OnTreasureSatchelReady - widget was null!");
@@ -1823,6 +1900,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public bool IsPaperControllerReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat IsPaperControllerReady");
 		if (m_paperController != null)
 		{
 			return !m_paperController.IsChangingStates;
@@ -1832,6 +1910,7 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public void OnPVPDRPlayMatReady(DuelsPlayMat playMat)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnPVPDRPlayMatReady");
 		if (playMat == null)
 		{
 			Debug.LogError("AdventureDungeonCrawlPlayMat.OnPVPDRPlayMatReady - widget loaded did not have DuelsPlayMat script!");
@@ -1847,11 +1926,13 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	public bool IsReadyToShowDuelsRewards()
 	{
+		//Log.Accessibility.PrintInfo("I'm now in Mat IsReadyToShowDuelsRewards");
 		return m_duelsReadyToShowRewards;
 	}
 
 	private void OnDuelsVaultOpened()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnDuelsVaultOpened");
 		m_duelsReadyToShowRewards = true;
 		m_duelsPlayMat.SetLeverButtonEnabled(enabled: false);
 		m_duelsPlayMat.RemoveVaultDoorOpenedListener(OnDuelsVaultOpened);
@@ -1863,17 +1944,20 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
 	private void OnDuelsVaultClicked()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnDuelsVaultClicked");
 		AdventureDungeonCrawlDisplay.Get().SetShowDeckButtonEnabled(enabled: false);
 		m_duelsPlayMat.RemoveVaultDoorClickedListener(OnDuelsVaultClicked);
 	}
 
 	public void OnDuelsRewardsAccepted()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat OnDuelsRewardsAccepted");
 		m_duelsReadyToShowRewards = false;
 	}
 
 	private void HandleDuelsPlayMatStateChange(PlayMatState state)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Mat HandleDuelsPlayMatStateChange");
 		if (PlayMatState.PVPDR_ACTIVE != state && PlayMatState.PVPDR_REWARD != state)
 		{
 			return;
@@ -1901,8 +1985,14 @@ public class AdventureDungeonCrawlPlayMat : MonoBehaviour
 
     internal void ClickPlayButton()
     {
+		Log.Accessibility.PrintInfo("I'm now in Mat ClickPlayButton");
 		m_playButton.TriggerRelease();
     }
 
+	internal bool IsStateInitialized()
+	{
+		return m_playMatStateInitialized;
+	}
+
     #endregion
 }
diff --git a/Assembly-CSharp/AdventureDungeonCrawlRewardOption.cs b/Assembly-CSharp/AdventureDungeonCrawlRewardOption.cs
index 2dac6db..f1a8db4 100644
--- a/Assembly-CSharp/AdventureDungeonCrawlRewardOption.cs
+++ b/Assembly-CSharp/AdventureDungeonCrawlRewardOption.cs
@@ -112,10 +112,12 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 	{
 		m_dungeonRunData = data;
 		SetRewardOptionVisualStyle();
+		Log.Accessibility.PrintInfo("I'm now in RewardOptions Initalize"+data.ToString());
 	}
 
 	private void Start()
 	{
+		Log.Accessibility.PrintInfo("I'm now in RewardOptions Start");
 		m_chooseButton.AddEventListener(UIEventType.RELEASE, delegate
 		{
 			OptionChosen();
@@ -124,15 +126,20 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	public void SetRewardData(OptionData optionData)
 	{
+		AdventureDungeonCrawlDisplay.ReadMenu = false; 
+		//PvPDungeonRunScene.ReadMenu = false; // todo 
+		Log.Accessibility.PrintInfo("I'm now in Reward SetRewardData");
 		m_optionData = optionData;
 		EnableInteraction();
 		if (m_bigCardActor != null)
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward SetRewardData m_bigCardActor");
 			m_bigCardActor.Destroy();
 			m_bigCardActor = null;
 		}
 		if (OptionTypeIsTreasure(optionData.optionType))
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward SetRewardData OptionTypeIsTreasure");
 			m_lootCrate.gameObject.SetActive(value: false);
 			long num = GetTreasureDatabaseID(optionData);
 			if (num == 0L)
@@ -147,27 +154,33 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 			}
 			else
 			{
+				Log.Accessibility.PrintInfo("I'm now in Reward SetRewardData text: "+text);
 				DefLoader.Get().LoadFullDef(text, OnTreasureFullDefLoaded, optionData);
 			}
 		}
 		else if (optionData.optionType == AdventureDungeonCrawlPlayMat.OptionType.LOOT)
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward SetRewardData LOOT");
 			SetLootCrateContents(optionData);
 		}
 	}
 
 	public Actor GetActorFromCardId(string cardId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward GetActorFromCardId");
 		if (m_deckTray != null)
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward GetActorFromCardId m_deckTray");
 			DeckTrayDeckTileVisual cardTileVisual = m_deckTray.GetCardsContent().GetCardTileVisual(cardId);
 			if (cardTileVisual != null)
 			{
+				Log.Accessibility.PrintInfo("I'm now in Reward GetActorFromCardId GetActor");
 				return cardTileVisual.GetActor();
 			}
 		}
 		if (m_bigCardActor != null && m_bigCardActor.GetEntityDef() != null && m_bigCardActor.GetEntityDef().GetCardId() == cardId)
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward GetActorFromCardId m_bigCardActor");
 			return m_bigCardActor;
 		}
 		return null;
@@ -175,24 +188,30 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	public int GetTreasureDatabaseID()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward GetTreasureDatabaseID");
 		return GetTreasureDatabaseID(m_optionData);
 	}
 
 	public static int GetTreasureDatabaseID(OptionData optionData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward GetTreasureDatabaseID");
 		if (!OptionTypeIsTreasure(optionData.optionType))
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward !OptionTypeIsTreasure");
 			return 0;
 		}
 		if (optionData.options.Count < 1)
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward Count");
 			return 0;
 		}
+		Log.Accessibility.PrintInfo("I'm now in Reward GetTreasureDatabaseID end");
 		return (int)optionData.options[0];
 	}
 
 	private void OnTreasureFullDefLoaded(string cardID, DefLoader.DisposableFullDef def, object userData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward OnTreasureFullDefLoaded");
 		OnFullDefLoadedData onFullDefLoadedData = default(OnFullDefLoadedData);
 		onFullDefLoadedData.optionData = (OptionData)userData;
 		onFullDefLoadedData.fullDef = def;
@@ -202,6 +221,7 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	private void OnTreasureActorLoaded(AssetReference assetRef, GameObject go, object callbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward OnTreasureActorLoaded");
 		OnFullDefLoadedData onFullDefLoadedData = (OnFullDefLoadedData)callbackData;
 		using (onFullDefLoadedData.fullDef)
 		{
@@ -243,16 +263,19 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	public OptionData GetOptionData()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward GetOptionData");
 		return m_optionData;
 	}
 
 	public void SetOptionChosenCallback(OptionChosenCallback callback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward SetOptionChosenCallback");
 		m_optionChosenCallback = callback;
 	}
 
 	public bool IsInitialized()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward IsInitialized");
 		if (OptionTypeIsTreasure(m_optionData.optionType))
 		{
 			return m_bigCardActor != null;
@@ -262,6 +285,7 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	public void PlayIntro()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward PlayIntro");
 		if (OptionTypeIsTreasure(m_optionData.optionType))
 		{
 			if (m_bigCardActor == null)
@@ -272,19 +296,23 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 			m_bigCardActor.Show();
 			m_bigCardActor.ActivateSpellBirthState(SpellType.SUMMON_IN_FORGE);
 			m_bigCardActor.ActivateSpellBirthState(DraftDisplay.GetSpellTypeForRarity(TAG_RARITY.RARE));
+			Log.Accessibility.PrintInfo("I'm now in Reward PlayIntro");
 			if (!string.IsNullOrEmpty(m_treasureCardAppearsSFX))
 			{
+				Log.Accessibility.PrintInfo("I'm now in Reward PlayIntro !IsNullOrEmpty");
 				SoundManager.Get().LoadAndPlay(m_treasureCardAppearsSFX);
 			}
 		}
 		else if (m_optionData.optionType == AdventureDungeonCrawlPlayMat.OptionType.LOOT)
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward PlayIntro LOOT");
 			m_lootCrateFSM.SendEvent(m_lootCrateDropAnimName);
 		}
 	}
 
 	public bool IntroIsPlaying()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward IntroIsPlaying");
 		if (OptionTypeIsTreasure(m_optionData.optionType))
 		{
 			return false;
@@ -298,8 +326,10 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	private void EnableInteraction()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward EnableInteraction");
 		if (m_bigCardActor != null && m_bigCardActor.GetCollider() != null)
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward EnableInteraction if");
 			m_bigCardActor.GetCollider().enabled = true;
 		}
 		m_chooseButton.SetEnabled(enabled: true);
@@ -307,6 +337,7 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	public void DisableInteraction()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward DisableInteraction");
 		if (m_bigCardActor != null && m_bigCardActor.GetCollider() != null)
 		{
 			m_bigCardActor.GetCollider().enabled = false;
@@ -316,6 +347,7 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	public void PlayOutro(bool thisOptionSelected)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward PlayOutro");
 		if (OptionTypeIsTreasure(m_optionData.optionType))
 		{
 			if (m_bigCardActor == null)
@@ -366,12 +398,14 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	private void OutroSpellFinished(Spell spell, object actorObject)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward OutroSpellFinished");
 		Actor actor = (Actor)actorObject;
 		StartCoroutine(WaitForAnimToFinishThenDestroy(actor.gameObject));
 	}
 
 	private IEnumerator WaitForAnimToFinishThenDestroy(GameObject gameObjectToDestroy)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward WaitForAnimToFinishThenDestroy");
 		yield return new WaitForSeconds(m_treasureOutroAnimDelay);
 		m_outroSpellIsPlaying = false;
 		yield return new WaitForSeconds(5f);
@@ -380,6 +414,7 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	public bool OutroIsPlaying()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward OutroIsPlaying");
 		if (OptionTypeIsTreasure(m_optionData.optionType))
 		{
 			return m_outroSpellIsPlaying;
@@ -393,14 +428,17 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	private void OptionChosen()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward OptionChosen");
 		if (m_optionChosenCallback != null)
 		{
+			Log.Accessibility.PrintInfo("I'm now in Reward OptionChosen !null");
 			m_optionChosenCallback();
 		}
 	}
 
 	private void SetRewardOptionVisualStyle()
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward SetRewardOptionVisualStyle");
 		DungeonRunVisualStyle visualStyle = m_dungeonRunData.VisualStyle;
 		foreach (AdventureDungeonCrawlRewardOptionStyleOverride item in m_rewardOptionStyle)
 		{
@@ -417,6 +455,7 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	private static bool OptionTypeIsTreasure(AdventureDungeonCrawlPlayMat.OptionType optionType)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward OptionTypeIsTreasure");
 		if (optionType != AdventureDungeonCrawlPlayMat.OptionType.SHRINE_TREASURE)
 		{
 			return optionType == AdventureDungeonCrawlPlayMat.OptionType.TREASURE;
@@ -426,6 +465,7 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 
 	private void SetLootCrateContents(OptionData optionData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in Reward SetLootCrateContents");
 		m_lootCrate.gameObject.SetActive(value: true);
 		CollectionDeck collectionDeck = new CollectionDeck
 		{
@@ -448,6 +488,7 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 				continue;
 			}
 			string text = GameUtils.TranslateDbIdToCardId((int)num);
+			Log.Accessibility.PrintInfo("I'm now in Reward SetLootCrateContents text: "+text);
 			if (string.IsNullOrEmpty(text))
 			{
 				Log.Adventures.PrintWarning("AdventureDungeonCrawlRewardOption.SetRewardData() - No cardId for dbId {0}!", num);
@@ -459,4 +500,10 @@ public class AdventureDungeonCrawlRewardOption : MonoBehaviour
 		}
 		m_deckTray.SetDungeonCrawlDeck(collectionDeck, playGlowAnimation: false);
 	}
+	#region Accessibility
+    // internal EntityDef GetEntityDef()
+    // {
+    //     return DefLoader.Get().GetEntityDef((int)m_databaseId);
+    // }
+    #endregion
 }
diff --git a/Assembly-CSharp/AdventureDungeonCrawlTreasureOption.cs b/Assembly-CSharp/AdventureDungeonCrawlTreasureOption.cs
index 538ed71..68d0302 100644
--- a/Assembly-CSharp/AdventureDungeonCrawlTreasureOption.cs
+++ b/Assembly-CSharp/AdventureDungeonCrawlTreasureOption.cs
@@ -83,6 +83,7 @@ public class AdventureDungeonCrawlTreasureOption : AdventureOptionWidget
 
 	protected override void OnClickableReady(Clickable clickable)
 	{
+		Log.Accessibility.PrintInfo("I'm now in TreasureOptions OnClickableReady");
 		base.OnClickableReady(clickable);
 		m_clickable.AddEventListener(UIEventType.RELEASE, delegate
 		{
@@ -112,6 +113,7 @@ public class AdventureDungeonCrawlTreasureOption : AdventureOptionWidget
 
 	protected override void Rollover()
 	{
+		Log.Accessibility.PrintInfo("I'm now in TreasureOptions Rollover");
 		base.Rollover();
 		if (m_cardActor != null)
 		{
@@ -130,6 +132,7 @@ public class AdventureDungeonCrawlTreasureOption : AdventureOptionWidget
 
 	private void OnCardActorLoaded(Actor cardActor)
 	{
+		Log.Accessibility.PrintInfo("I'm now in TreasureOptions OnCardActorLoaded");
 		m_cardActor = cardActor;
 		if (m_cardActor != null)
 		{
@@ -171,6 +174,7 @@ public class AdventureDungeonCrawlTreasureOption : AdventureOptionWidget
 
 	public void Init(long cardDbId, bool locked, string lockedText, bool upgraded, bool completed, bool newlyUnlocked, OptionAcknowledgedCallback acknowledgedCallback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in TreasureOptions Init");
 		m_databaseId = cardDbId;
 		string text = null;
 		InitWidget(text, locked, lockedText, upgraded, completed, newlyUnlocked, acknowledgedCallback);
@@ -179,6 +183,7 @@ public class AdventureDungeonCrawlTreasureOption : AdventureOptionWidget
 
 	public override void Select()
 	{
+		Log.Accessibility.PrintInfo("I'm now in TreasureOptions Select");
 		base.Select();
 		TreasureSelectedOptionCallback treasureSelectedOptionCallback = m_selectedCallback as TreasureSelectedOptionCallback;
 		if (treasureSelectedOptionCallback == null)
@@ -203,4 +208,10 @@ public class AdventureDungeonCrawlTreasureOption : AdventureOptionWidget
 		Rollout();
 		PlaySpells(m_dataModel.IsSelectedOption ? MoteOutSpellsForSelected : MoteOutSpells);
 	}
+	#region Accessibility
+    internal EntityDef GetEntityDef()
+    {
+        return DefLoader.Get().GetEntityDef((int)m_databaseId);
+    }
+    #endregion
 }
diff --git a/Assembly-CSharp/CollectibleDisplay.cs b/Assembly-CSharp/CollectibleDisplay.cs
index c60bb86..5ee0e7f 100644
--- a/Assembly-CSharp/CollectibleDisplay.cs
+++ b/Assembly-CSharp/CollectibleDisplay.cs
@@ -156,6 +156,8 @@ public abstract class CollectibleDisplay : AbsSceneDisplay
 		}
 		LoadAllTextures();
 		EnableInput(enable: true);
+
+		AccessibleCollectionManager.Get().OnCollectionManagerOpened();
 	}
 
 	protected virtual void OnDestroy()
@@ -164,6 +166,8 @@ public abstract class CollectibleDisplay : AbsSceneDisplay
 		{
 			CollectionManager.Get().SetCollectibleDisplay(null);
 		}
+
+		AccessibleCollectionManager.Get().OnCollectionManagerClosed();
 	}
 
 	public Material GetGoldenCardNotOwnedMeshMaterial()
diff --git a/Assembly-CSharp/CollectionDeckTray.cs b/Assembly-CSharp/CollectionDeckTray.cs
index f86b4d1..3c23cd7 100644
--- a/Assembly-CSharp/CollectionDeckTray.cs
+++ b/Assembly-CSharp/CollectionDeckTray.cs
@@ -850,16 +850,20 @@ public class CollectionDeckTray : EditableDeckTray
 		m_runeIndicatorVisual.EnableRuneButtons();
 		m_cardsContent.UpdateCardList();
 		CheckNumCardsNeededToBuildDeck(deck);
+		AccessibleCollectionManager.Get().PrepareToEditDeck();
 		CollectionManager.Get().StartEditingDeck(deck, isNewDeck);
 	}
 
 	public void ExitEditDeckModeForTavernBrawl()
 	{
 		UpdateDoneButtonText();
+
+		AccessibleCollectionManager.Get().OnDoneEditingDeck();
 	}
 
 	public void EnterDeckEditForPVPDR(CollectionDeck deck)
 	{
+		AccessibleCollectionManager.Get().PrepareToEditDeck();
 		CollectionManager.Get().SetEditedDeck(deck);
 		CollectionManagerDisplay obj = CollectionManager.Get().GetCollectibleDisplay() as CollectionManagerDisplay;
 		obj.ShowDuelsDeckHeader();
diff --git a/Assembly-CSharp/CollectionManager.cs b/Assembly-CSharp/CollectionManager.cs
index d1fc756..8b220ea 100644
--- a/Assembly-CSharp/CollectionManager.cs
+++ b/Assembly-CSharp/CollectionManager.cs
@@ -3206,10 +3206,16 @@ public class CollectionManager
 		}
 		SetDeckRuleset(deckRuleset);
 		SetEditedDeck(deck, callbackData);
+
+		if (AccessibleCollectionManager.Get().m_willEditDeck)
+		{
+			AccessibleCollectionManager.Get().OnStartEditingDeck();
+		}
 	}
 
 	public void DoneEditing()
 	{
+		AccessibleCollectionManager.Get().OnDoneEditingDeck();
 		bool editMode = m_editMode;
 		m_editMode = false;
 		FriendChallengeMgr.Get().UpdateMyAvailability();
diff --git a/Assembly-CSharp/CollectionManagerDisplay.cs b/Assembly-CSharp/CollectionManagerDisplay.cs
index ef4eb30..e4dc6ac 100644
--- a/Assembly-CSharp/CollectionManagerDisplay.cs
+++ b/Assembly-CSharp/CollectionManagerDisplay.cs
@@ -1167,6 +1167,8 @@ public class CollectionManagerDisplay : CollectibleDisplay
 		});
 		collectionDeckTray.GetCardsContent().RegisterCardTileRightClickedListener(OnCardTileRightClicked);
 		m_isReady = true;
+
+		AccessibleCollectionManager.Get().OnCollectibleDisplayReady();
 	}
 
 	private IEnumerator InitCollectionWhenReady()
diff --git a/Assembly-CSharp/CollectionManagerScene.cs b/Assembly-CSharp/CollectionManagerScene.cs
index 79674a3..85a09e0 100644
--- a/Assembly-CSharp/CollectionManagerScene.cs
+++ b/Assembly-CSharp/CollectionManagerScene.cs
@@ -14,7 +14,6 @@ public class CollectionManagerScene : PegasusScene
 	{
 		base.Awake();
 		AssetLoader.Get().InstantiatePrefab((string)m_CollectionManagerPrefab, OnUIScreenLoaded);
-		AccessibleCollectionManager.Get().OnCollectionManagerOpened();
 	}
 
 	private void Update()
@@ -59,7 +58,6 @@ public class CollectionManagerScene : PegasusScene
 		{
 			yield return null;
 		}
-		AccessibleCollectionManager.Get().OnCollectibleDisplayReady();
 		SceneMgr.Get().NotifySceneLoaded();
 	}
 }
diff --git a/Assembly-CSharp/DuelsConfig.cs b/Assembly-CSharp/DuelsConfig.cs
index db03c20..c51e76c 100644
--- a/Assembly-CSharp/DuelsConfig.cs
+++ b/Assembly-CSharp/DuelsConfig.cs
@@ -54,12 +54,14 @@ public class DuelsConfig
 
 	public void SetLastGameResult(TAG_PLAYSTATE lastGameState)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsConfig SetLastGameResult");
 		m_recentLoss = lastGameState == TAG_PLAYSTATE.LOST;
 		m_recentWin = lastGameState == TAG_PLAYSTATE.WON;
 	}
 
 	public void ResetLastGameResult()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsConfig ResetLastGameResult");
 		m_recentLoss = false;
 		m_recentWin = false;
 	}
@@ -91,6 +93,7 @@ public class DuelsConfig
 
 	public bool IsReadyToShowRewards()
 	{
+		//Log.Accessibility.PrintInfo("I'm now in DuelsConfig IsReadyToShowRewards");
 		AdventureDungeonCrawlDisplay adventureDungeonCrawlDisplay = AdventureDungeonCrawlDisplay.Get();
 		if (adventureDungeonCrawlDisplay != null && adventureDungeonCrawlDisplay.m_playMat != null)
 		{
@@ -173,6 +176,7 @@ public class DuelsConfig
 
 	public static bool IsInitialLoadoutComplete()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsConfig IsInitialLoadoutComplete");
 		if (PvPDungeonRunScene.Get() == null)
 		{
 			return false;
@@ -207,6 +211,7 @@ public class DuelsConfig
 
 	public static List<TAG_CARD_SET> GetDuelsSets()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsConfig GetDuelsSets");
 		List<TAG_CARD_SET> list = new List<TAG_CARD_SET>();
 		DeckRuleset pVPDRRuleset = DeckRuleset.GetPVPDRRuleset();
 		if (pVPDRRuleset != null)
@@ -227,6 +232,7 @@ public class DuelsConfig
 
 	public static int GetAdventureIdForSeason(int seasonId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsConfig GetAdventureIdForSeason");
 		return GameDbf.PvpdrSeason.GetRecord(seasonId)?.AdventureId ?? 0;
 	}
 }
diff --git a/Assembly-CSharp/DuelsPopupManager.cs b/Assembly-CSharp/DuelsPopupManager.cs
index 7d792d6..da33b68 100644
--- a/Assembly-CSharp/DuelsPopupManager.cs
+++ b/Assembly-CSharp/DuelsPopupManager.cs
@@ -1,5 +1,6 @@
 using System;
 using System.Collections.Generic;
+using Accessibility;
 using Assets;
 using Blizzard.GameService.SDK.Client.Integration;
 using Blizzard.T5.MaterialService.Extensions;
@@ -10,7 +11,7 @@ using Hearthstone.UI;
 using PegasusUtil;
 using UnityEngine;
 
-public class DuelsPopupManager : MonoBehaviour, IStore
+public class DuelsPopupManager : MonoBehaviour, IStore, AccessibleScreen
 {
 	private const string HEROIC_STORE_OPENED_EVENT = "HEROIC_STORE_OPENED";
 
@@ -305,6 +306,7 @@ public class DuelsPopupManager : MonoBehaviour, IStore
 	{
 		this.OnProductOpened?.Invoke();
 		m_visualController.SetState("OPEN");
+		ReadScreen();
 	}
 
 	public void ShowNotice(string header, string desc, string rating, Action callback)
@@ -659,4 +661,80 @@ public class DuelsPopupManager : MonoBehaviour, IStore
 		}
 		return hashSet;
 	}
+	#region Accessibility
+	private enum State { LOADING, DUELS_TYPE_CHOOSING, GO_BACK };
+	private State m_curState = State.LOADING;
+	private AccessibleHorizontalMenu<AccessibleMultilineText> m_currMenu;
+	private void onClickNormal()
+	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsPopup onClickNormal");
+		OnNormalButtonPressed(null);
+		Hide();
+		m_curState = State.LOADING;
+	}
+
+	private void onClickHeroic() // todo implement heroic duels
+	{
+		OnBuyWithCurrencyButtonPressed(null);
+		Hide();
+		m_curState = State.LOADING;
+	}
+
+	private void onGoBackToHub()
+	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsPopup onGoBackToHub");
+		m_curState = State.GO_BACK;
+		Hide();
+		Navigation.PopBlockBackingOut();
+		Navigation.GoBack();
+		//todo get main menu in dungeonrun, not to choose mode menu
+	}
+	private void SetupDuelsTypeMenu()
+	{
+		m_currMenu = new AccessibleHorizontalMenu<AccessibleMultilineText>(this, GameStrings.Get("GLUE_PVPDR"), onGoBackToHub);
+		//m_currMenu = new AccessibleHorizontalMenu<AccessibleMultilineText>(this, LocalizationUtils.Get(LocalizationKey.SCREEN_DUELS_CHOOSE_TYPE), onGoBackToHub);
+		m_currMenu.AddOption(new AccessibleMultilineText(this, GameStrings.Get("GLUE_PVPDR_ENTRY_POPUP_LABEL_NORMAL"), GameStrings.Get("GLUE_PVPDR_ENTRY_POPUP_DESCRIPTION_NORMAL")), onClickNormal);
+		//m_currMenu.AddOption(new AccessibleMultilineText(this, GameStrings.Get("GLUE_PVPDR_ENTRY_POPUP_LABEL_HEROIC"), GameStrings.Get("GLUE_PVPDR_ENTRY_POPUP_DESCRIPTION_HEROIC")), onClickHeroic);
+		ReadDuelsTypeMenu();
+	}
+	private void ReadDuelsTypeMenu()
+	{
+		m_curState = State.DUELS_TYPE_CHOOSING;
+		m_currMenu.StartReading();
+	}
+	public void HandleInput()
+	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsPopup HandleInput");
+		if (m_curState == State.DUELS_TYPE_CHOOSING)
+		{
+			m_currMenu?.HandleAccessibleInput();
+		}
+		else if  (m_curState == State.GO_BACK)
+		{
+			return; // return to main menu, not working yet, menu not found, todo 
+		}
+	}
+		public string GetHelp()
+	{
+		if (m_curState == State.DUELS_TYPE_CHOOSING)
+		{
+			return m_currMenu?.GetHelp();
+		}
+		return "";
+	}
+	public void OnGainedFocus()
+	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsPopup OnGainedFocus");
+		if (m_curState == State.DUELS_TYPE_CHOOSING)
+		{
+			m_currMenu?.StartReading();
+		}
+	}
+	public void ReadScreen()
+	{
+		Log.Accessibility.PrintInfo("I'm now in DuelsPopup ReadScreen");
+		AccessibilityMgr.SetScreen(this);
+		SetupDuelsTypeMenu();
+	}
+	#endregion
 }
diff --git a/Assembly-CSharp/GameModeDisplay.cs b/Assembly-CSharp/GameModeDisplay.cs
index e81a91e..9a85671 100644
--- a/Assembly-CSharp/GameModeDisplay.cs
+++ b/Assembly-CSharp/GameModeDisplay.cs
@@ -80,6 +80,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void Start()
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay Start");
 		m_DisplayReference.RegisterReadyListener<Widget>(OnDisplayReady);
 		m_PlayButtonReference.RegisterReadyListener<PlayButton>(OnPlayButtonReady);
 		if ((bool)UniversalInputManager.UsePhoneUI)
@@ -118,6 +119,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void GameModeDisplayEventListener(string eventName)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay GameModeDisplayEventListener");
 		switch (eventName)
 		{
 		case "CHOOSE":
@@ -134,6 +136,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void OnDisplayReady(Widget widget)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay OnDisplayReady");
 		if (widget == null)
 		{
 			Error.AddDevWarning("UI Error!", "DisplayReference could not be found!");
@@ -146,6 +149,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	public void OnPlayButtonReady(PlayButton playButton)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay OnPlayButtonReady");
 		m_playButtonFinishedLoading = true;
 		if (playButton == null)
 		{
@@ -159,6 +163,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	public void OnBackButtonReady(UIBButton backButton)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay OnBackButtonReady");
 		m_backButtonFinishedLoading = true;
 		if (backButton == null)
 		{
@@ -197,6 +202,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void InitializeGameModeSceneData()
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay InitializeGameModeSceneData");
 		GameModeSceneDataModel gameModeSceneDataModel = GetGameModeSceneDataModel();
 		if (gameModeSceneDataModel == null)
 		{
@@ -270,6 +276,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	private bool CanEnterMode(out string reason)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay CanEnterMode");
 		reason = "";
 		GameModeDbfRecord gameModeDbfRecord = null;
 		foreach (GameModeDbfRecord activeGameModeRecord in m_activeGameModeRecords)
@@ -321,27 +328,32 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void InitializeSlidingTray()
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay InitializeSlidingTray");
 		bool show = SceneMgr.Get().GetPrevMode() == SceneMgr.Mode.HUB;
 		m_slidingTray.ToggleTraySlider(show, null, animate: false);
 	}
 
 	private void PlayButtonRelease(UIEvent e)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay PlayButtonRelease");
 		NavigateToSelectedMode();
 	}
 
 	private void BackButtonRelease(UIEvent e)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay BackButtonRelease");
 		GoToHub();
 	}
 
 	private void GoToHub()
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay GoToHub");
 		SceneMgr.Get().SetNextMode(SceneMgr.Mode.HUB);
 	}
 
 	private void NavigateToSelectedMode()
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay NavigateToSelectedMode");
 		m_playButton.Disable();
 		if (m_selectedGameModeButtonDataModel == null)
 		{
@@ -401,6 +413,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void DoTavernBrawlIntroVO()
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay DoTavernBrawlIntroVO");
 		if (!NotificationManager.Get().HasSoundPlayedThisSession("VO_INNKEEPER_TAVERNBRAWL_PUSH_32.prefab:4f57cd2af5fe5194fbc46c91171ab135"))
 		{
 			Action<int> finishCallback = delegate
@@ -414,6 +427,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	public void PlayTavernBrawlCrowdSFX()
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay PlayTavernBrawlCrowdSFX");
 		if (m_tavernBrawlEnterCrowdSounds.Count >= 1)
 		{
 			int index = UnityEngine.Random.Range(0, m_tavernBrawlEnterCrowdSounds.Count);
@@ -450,12 +464,14 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void OnSceneLoadCompleteHandleTransition(Action onTransitionComplete)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay OnSceneLoadCompleteHandleTransition");
 		m_onSceneTransitionCompleteCallback = onTransitionComplete;
 		m_slidingTray.HideTray();
 	}
 
 	public void ShowSlidingTrayAfterSceneLoad(Action onCompleteCallback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay ShowSlidingTrayAfterSceneLoad");
 		m_clickBlocker.SetActive(value: true);
 		m_onSceneTransitionCompleteCallback = onCompleteCallback;
 		m_slidingTray.ShowTray();
@@ -463,6 +479,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void OnSlidingTrayAnimationComplete()
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay OnSlidingTrayAnimationComplete");
 		m_clickBlocker.SetActive(value: false);
 		if (m_onSceneTransitionCompleteCallback != null)
 		{
@@ -473,6 +490,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void OnGameModeSelected()
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay OnGameModeSelected");
 		EventDataModel eventDataModel = GetEventDataModel();
 		if (eventDataModel == null)
 		{
@@ -486,6 +504,7 @@ public class GameModeDisplay : MonoBehaviour
 
     private void ShowDisabledPopupForCurrentMode(string lockReason)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay ShowDisabledPopupForCurrentMode");
 		if (!string.IsNullOrEmpty(lockReason))
 		{
 			string header = GameStrings.Get(m_selectedGameModeButtonDataModel.Name);
@@ -495,6 +514,7 @@ public class GameModeDisplay : MonoBehaviour
 
 	private void ShowDisabledPopup(string header, string description)
 	{
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay ShowDisabledPopup");
 		if (string.IsNullOrEmpty(description))
 		{
 			description = GameStrings.Get("GLUE_TOOLTIP_BUTTON_DISABLED_DESC");
@@ -512,12 +532,14 @@ public class GameModeDisplay : MonoBehaviour
 	#region Accessibility
 	internal void SelectMode(GameModeButtonDataModel gameModeButtonDataModel)
     {
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay SelectMode");
 		m_selectedGameModeButtonDataModel = gameModeButtonDataModel;
 		OnGameModeSelectedPart2();
     }
 
     private void OnGameModeSelectedPart2()
     {
+		Log.Accessibility.PrintInfo("I'm now in GameModeDisplay OnGameModeSelectedPart2");
 		GameSaveDataManager.Get().SaveSubkey(new GameSaveDataManager.SubkeySaveRequest(GameSaveKeyId.GAME_MODE_SCENE, GameSaveKeySubkeyId.GAME_MODE_SCENE_LAST_SELECTED_GAME_MODE, m_selectedGameModeButtonDataModel.GameModeRecordId));
 		GameModeSceneDataModel gameModeSceneDataModel = GetGameModeSceneDataModel();
 		if (gameModeSceneDataModel != null)
diff --git a/Assembly-CSharp/GuestHeroPickerTrayDisplay.cs b/Assembly-CSharp/GuestHeroPickerTrayDisplay.cs
index 344b5b2..753d9a5 100644
--- a/Assembly-CSharp/GuestHeroPickerTrayDisplay.cs
+++ b/Assembly-CSharp/GuestHeroPickerTrayDisplay.cs
@@ -691,7 +691,7 @@ public class GuestHeroPickerTrayDisplay : AbsDeckPickerTrayDisplay, AccessibleSc
 
 	private void ReadPickerTrayDisplay()
 	{
-		if (!SupportedAdventure())
+		if (!SupportedAdventure() && !SceneMgr.Get().IsInDuelsMode())
         {
 			return;
         }
@@ -703,10 +703,15 @@ public class GuestHeroPickerTrayDisplay : AbsDeckPickerTrayDisplay, AccessibleSc
 
 		var numSupportedBoHHeroes = 11; // Jaina, Rexxar, Garrosh, Uther, Anduin, Valeera, Thrall
 				var numSupportedBoMHeroes = 10; // Jaina, Rexxar, Garrosh, Uther, Anduin, Valeera, Thrall
+				var numSupportedDuelsHeroes = 6;
 		var selectedAdventure = AdventureConfig.Get().SelectedAdventure;
 		var numSupported=0;
 		if(selectedAdventure==AdventureDbId.BOH) numSupported=numSupportedBoHHeroes;
 		if(selectedAdventure==AdventureDbId.BOM) numSupported=numSupportedBoMHeroes;
+		if (SceneMgr.Get().IsInDuelsMode())
+		{
+			numSupported = numSupportedDuelsHeroes;
+		}
 		//foreach (var hb in m_heroButtons)
 		for (var i = 0; i < numSupported; i++)
         {
@@ -728,7 +733,7 @@ public class GuestHeroPickerTrayDisplay : AbsDeckPickerTrayDisplay, AccessibleSc
 
     protected override void OnChosenHero()
     {
-		if (!SupportedAdventure())
+		if (!SupportedAdventure() && !SceneMgr.Get().IsInDuelsMode())
         {
 			return;
         }
diff --git a/Assembly-CSharp/Navigation.cs b/Assembly-CSharp/Navigation.cs
index 1aa7291..8529863 100644
--- a/Assembly-CSharp/Navigation.cs
+++ b/Assembly-CSharp/Navigation.cs
@@ -55,15 +55,19 @@ public static class Navigation
 
 	public static bool GoBack()
 	{
+		Log.Accessibility.PrintInfo("I'm in Navigation GoBack");
 		if (!CanGoBack)
 		{
+			Log.Accessibility.PrintInfo("I'm in Navigation GoBack - false");
 			return false;
 		}
 		NavigateBackHandler navigateBackHandler = m_history.Peek();
 		if (navigateBackHandler())
 		{
+			Log.Accessibility.PrintInfo("I'm in Navigation navigateBackHandler");
 			if (m_history.Count > 0 && navigateBackHandler == m_history.Peek())
 			{
+				Log.Accessibility.PrintInfo("I'm in Navigation m_history: "+m_history.Peek());
 				m_history.Pop();
 			}
 			else if (m_history.Contains(navigateBackHandler))
@@ -76,13 +80,16 @@ public static class Navigation
 			}
 			return true;
 		}
+		Log.Accessibility.PrintInfo("I'm in Navigation GoBack - return false");
 		return false;
 	}
 
 	public static void Push(NavigateBackHandler handler)
 	{
+		Log.Accessibility.PrintInfo("I'm in Navigation Push");
 		if (handler != null)
 		{
+			Log.Accessibility.PrintInfo("I'm in Navigation Push !null");
 			m_history.Push(handler);
 			if (NAVIGATION_DEBUG)
 			{
@@ -182,13 +189,16 @@ public static class Navigation
 
 	private static bool CanNavigate()
 	{
+		Log.Accessibility.PrintInfo("I'm in Navigation CanNavigate");
 		if (GameUtils.IsAnyTransitionActive())
 		{
+			Log.Accessibility.PrintInfo("I'm in Navigation CanNavigate - false 1");
 			return false;
 		}
 		FindGameState findGameState = GameMgr.Get().GetFindGameState();
 		if ((uint)(findGameState - 1) <= 2u || (uint)(findGameState - 7) <= 4u)
 		{
+			Log.Accessibility.PrintInfo("I'm in Navigation CanNavigate - false 2");
 			return false;
 		}
 		return true;
diff --git a/Assembly-CSharp/PvPDungeonRunDisplay.cs b/Assembly-CSharp/PvPDungeonRunDisplay.cs
index e4ded39..de30bf4 100644
--- a/Assembly-CSharp/PvPDungeonRunDisplay.cs
+++ b/Assembly-CSharp/PvPDungeonRunDisplay.cs
@@ -461,4 +461,5 @@ public class PvPDungeonRunDisplay : MonoBehaviour
 			});
 		}
 	}
+
 }
diff --git a/Assembly-CSharp/PvPDungeonRunScene.cs b/Assembly-CSharp/PvPDungeonRunScene.cs
index 2d53978..c26dba6 100644
--- a/Assembly-CSharp/PvPDungeonRunScene.cs
+++ b/Assembly-CSharp/PvPDungeonRunScene.cs
@@ -1,13 +1,15 @@
 using System;
 using System.Collections;
+using System.Collections.Generic;
 using Assets;
+using Accessibility;
 using Hearthstone.DataModels;
 using Hearthstone.DungeonCrawl;
 using PegasusUtil;
 using UnityEngine;
 
 [CustomEditClass]
-public class PvPDungeonRunScene : PegasusScene
+public class PvPDungeonRunScene : PegasusScene, AccessibleScreen
 {
 	[CustomEditField(T = EditType.GAME_OBJECT)]
 	public String_MobileOverride m_screenPrefab;
@@ -99,6 +101,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public void Start()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene start");
 		m_instance = this;
 		AssetLoader.Get().InstantiatePrefab((string)m_CollectionManagerPrefab, OnCollectionManagerLoaded);
 		AssetLoader.Get().InstantiatePrefab((string)m_PopupManagerPrefab, OnPopupManagerLoaded);
@@ -140,6 +143,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	private void OnCollectionManagerLoaded(AssetReference assetRef, GameObject go, object callbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene OnCollectionManagerLoaded");
 		m_collectionManagerPrefabLoaded = true;
 		if (go == null)
 		{
@@ -155,12 +159,14 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public void OnGuestHeroSelected(TAG_CLASS classId, GuestHeroDbfRecord record)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene OnGuestHeroSelected");
 		m_services.DungeonCrawlData.SelectedHeroCardDbId = record.CardId;
 		TransitionToDungeonCrawlPlayMat();
 	}
 
 	public bool TransitionToGuestHeroPicker()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene TransitionToGuestHeroPicker");
 		bool num = AssetLoader.Get().InstantiatePrefab("GuestHeroPicker.prefab:3ecbc18da1de3ef4fa30532f90b20e59", OnGuestHeroPickerLoaded);
 		if (!num)
 		{
@@ -179,6 +185,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public void TransitionToDungeonCrawlPlayMat()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene TransitionToDungeonCrawlPlayMat void");
 		if (!(m_dungeonCrawlDisplay == null))
 		{
 			return;
@@ -198,6 +205,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public bool TransitionFromDungeonCrawlPlayMat()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene TransitionFromDungeonCrawlPlayMat bool");
 		m_displayRoot.SetActive(value: true);
 		Vector3 up = Vector3.up;
 		up.x -= m_transitionStartingOffset;
@@ -236,22 +244,26 @@ public class PvPDungeonRunScene : PegasusScene
 				collectionManagerDisplay.OnDoneEditingDeck();
 			}
 		}
+		ReadScreen();
 		return true;
 	}
 
 	public bool NavigateBackFromPlaymat()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene NavigateBackFromPlaymat");
 		PVPDRLobbyDataModel pVPDRLobbyDataModel = m_display.GetPVPDRLobbyDataModel();
 		bool flag = DungeonCrawlUtil.IsPVPDRSessionComplete();
 		if (!pVPDRLobbyDataModel.HasSession || flag || DuelsConfig.IsInitialLoadoutComplete())
 		{
 			if (!TransitionFromDungeonCrawlPlayMat())
 			{
+				Log.Accessibility.PrintInfo("I'm now in DungeonRunScene NavigateBackFromPlaymat - push1");
 				Navigation.Push(NavigateBackFromPlaymat);
 			}
 		}
 		else if (!TransitionToGuestHeroPicker())
 		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonRunScene NavigateBackFromPlaymat - push2");
 			Navigation.Push(NavigateBackFromPlaymat);
 		}
 		return true;
@@ -259,14 +271,17 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public void TransitionBackFromGuestHeroPicker()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene TransitionBackFromGuestHeroPicker");
 		GuestHeroPickerDisplay.Get().HideTray();
 		m_displayRoot.SetActive(value: true);
 		m_displayRoot.transform.localPosition = Vector3.up;
 		m_display.EnableButtons(enabled: false);
+		ReadScreen();
 	}
 
 	public void SetAdventureData()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene SetAdventureData");
 		AdventureConfig adventureConfig = AdventureConfig.Get();
 		adventureConfig.SetSelectedAdventureMode(m_services.DungeonCrawlData.GetSelectedAdventure(), AdventureModeDbId.DUNGEON_CRAWL);
 		adventureConfig.SetMission(m_services.DungeonCrawlData.GetMission());
@@ -274,6 +289,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public void ShowDungeonCrawlDisplay(Action<object> action)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene ShowDungeonCrawlDisplay");
 		int num = ((!UniversalInputManager.UsePhoneUI) ? 3 : 0);
 		Hashtable tweenHashTable = iTweenManager.Get().GetTweenHashTable();
 		tweenHashTable.Add("islocal", true);
@@ -289,6 +305,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public void HideDungeonCrawlDisplay(Action onCompleteCallback = null)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene HideDungeonCrawlDisplay");
 		m_isTransitioningToCollection = true;
 		int num = (UniversalInputManager.UsePhoneUI ? (-180) : (-110));
 		Hashtable tweenHashTable = iTweenManager.Get().GetTweenHashTable();
@@ -311,6 +328,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public void OnHeroPickerShown()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene OnHeroPickerShown");
 		m_display.OnHeroPickerShown();
 		m_display.EnableButtons(enabled: false);
 		if (m_displayRoot != null)
@@ -326,31 +344,37 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public void OnHeroPickerHidden()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene OnHeroPickerHidden");
 		m_display.EnableButtons();
 	}
 
 	public AdventureDef GetAdventureDef(AdventureDbId advId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene GetAdventureDef");
 		return m_adventureDefCache.GetDef(advId);
 	}
 
 	public AdventureWingDef GetWingDef(WingDbId wingId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene GetWingDef");
 		return m_adventureWingDefCache.GetDef(wingId);
 	}
 
 	public IDungeonCrawlData GetDungeonCrawlData()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene GetDungeonCrawlData");
 		return m_services.DungeonCrawlData;
 	}
 
 	public override bool IsUnloading()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene IsUnloading");
 		return m_unloading;
 	}
 
 	public override void Unload()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene Unload");
 		m_unloading = true;
 		if ((bool)UniversalInputManager.UsePhoneUI)
 		{
@@ -395,6 +419,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	private void DoDungeonRunTransition()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene DoDungeonRunTransition");
 		if ((bool)GuestHeroPickerDisplay.Get())
 		{
 			m_services.SubsceneController.OnTransitionComplete();
@@ -437,6 +462,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	private void CreateServices(AdventureDbId adventureId)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene CreateServices");
 		m_assetLoadingHelper = new AssetLoadingHelper();
 		m_assetLoadingHelper.AssetLoadingComplete += OnAssetLoadingComplete;
 		m_services = DungeonCrawlUtil.CreatePvPDungeonCrawlServices(adventureId, m_assetLoadingHelper);
@@ -444,6 +470,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	private void OnAssetLoadingComplete(object sender, EventArgs args)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene OnAssetLoadingComplete");
 		if (m_services != null && m_dungeonCrawlDisplay != null)
 		{
 			DoDungeonRunTransition();
@@ -452,6 +479,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	private void OnGameSaveDataReceived(bool success)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene OnGameSaveDataReceived");
 		m_gameSaveDataReceived = true;
 	}
 
@@ -469,6 +497,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	private void OnPVPDRSessionInfoResponse()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene OnPVPDRSessionInfoResponse");
 		PVPDRSessionInfoResponse pVPDRSessionInfoResponse = Network.Get().GetPVPDRSessionInfoResponse();
 		m_hasSession = pVPDRSessionInfoResponse.HasSession;
 		m_hasLatestSessionData = true;
@@ -495,6 +524,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	private void OnScreenPrefabLoaded(AssetReference assetRef, GameObject go, object callbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene OnScreenPrefabLoaded");
 		if (go == null)
 		{
 			Debug.LogError($"PvPDungeonRunScene.OnScreenLoaded() - failed to load screen {assetRef}");
@@ -507,6 +537,7 @@ public class PvPDungeonRunScene : PegasusScene
 
 	private IEnumerator NotifySceneLoadedWhenReady()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene NotifySceneLoadedWhenReady");
 		while (!m_hasStatsInfo)
 		{
 			yield return null;
@@ -557,15 +588,18 @@ public class PvPDungeonRunScene : PegasusScene
 		obj.EnableInput(enable: false);
 		obj.PopulateSetFilters(shouldReset: true);
 		SceneMgr.Get().NotifySceneLoaded();
+		ReadScreen();
 	}
 
 	public DuelsPopupManager GetPopupManager()
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene GetPopupManager");
 		return m_PopupManager;
 	}
 
 	private void OnPopupManagerLoaded(AssetReference assetRef, GameObject go, object callbackData)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene GetPopupManager");
 		if (go == null)
 		{
 			Debug.LogError($"PvPDungeonRunScene.OnPopupManagerLoaded() - failed to load screen {assetRef}");
@@ -578,10 +612,148 @@ public class PvPDungeonRunScene : PegasusScene
 
 	public static void ShowDuelsMessagePopup(string header, string message, string rating, Action callback)
 	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene ShowDuelsMessagePopup");
 		DuelsPopupManager popupManager = m_instance.GetPopupManager();
 		if (popupManager != null)
 		{
 			popupManager.ShowNotice(header, message, rating, callback);
 		}
 	}
+
+	#region Accessibility
+
+	private enum State { LOADING, MAIN_MENU, READING_STATS, READING_DUELS_PLAY_MENU };
+
+	private State m_curState = State.LOADING;
+	private AccessibleMenu m_currMenu;
+	private AccessibleMultilineText m_accessibleStats;
+	private AccessibleMenu m_AccessibleDuelsPlayMenu;
+	public static Boolean IsRetired;
+	public static Boolean ReadMenu = true;
+
+	private void ReadScreen()
+	{
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene ReadScreen");
+		if (IsRetired)
+		{
+			Log.Accessibility.PrintInfo("IsRetired: true");
+			m_display.m_playButton.m_newPlayButtonText.SetText("GLOBAL_PLAY");
+			m_instance.m_PopupManager.Hide();
+		}
+		else
+		{
+			Log.Accessibility.PrintInfo("IsRetired: false");
+		}
+
+		Log.Accessibility.PrintInfo(m_display.m_playButton.m_newPlayButtonText.Text);
+		AccessibilityMgr.SetScreen(this);
+		m_currMenu = new AccessibleMenu(this, GameStrings.Get("GLUE_PVPDR"), OnGoBackToHub);
+		m_currMenu.AddOption(GameStrings.Get(m_display.m_playButton.m_newPlayButtonText.Text), OnClickPlay); // todo after retiring button should read GLOBAL_PLAY
+		m_currMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SCREEN_DUELS_READ_STATS), OnReadStats);
+		m_currMenu.AddOption(LocalizedText.SCREEN_GO_BACK, OnGoBackToHub);
+		ReadMainMenu();
+	}
+
+	public void ReadMainMenu()
+	{
+		m_curState = State.MAIN_MENU;
+		Log.Accessibility.PrintInfo("I'm now in state MAIN_MENU in ReadMainMenu - ReadMenu: "+ReadMenu);
+		if (ReadMenu)
+		{
+			try 
+			{
+				m_currMenu.StartReading();
+			}
+			catch  (Exception e)
+			{
+				AccessibilityUtils.LogFatalError(e);
+				ReadScreen();
+			}
+		}
+	}
+
+	private void OnReadStats()
+	{
+		var PVPDRLobbyDataModel = m_display.GetPVPDRLobbyDataModel();
+		var casualRatingCount = PVPDRLobbyDataModel.Rating;
+		var heroicRatingCount = PVPDRLobbyDataModel.PaidRating;
+		var totalRatingCount = PVPDRLobbyDataModel.Wins;
+		var seasonEndInfo = PVPDRLobbyDataModel.TimeRemainingString;
+		var lines = new List<string>();
+		lines.Add(AccessibleSpeechUtils.CombineWordsWithColon(GameStrings.Get("GLUE_PVPDR_RATING_LABEL_NORMAL"), $"{casualRatingCount}"));
+		lines.Add(AccessibleSpeechUtils.CombineWordsWithColon(GameStrings.Get("GLUE_PVPDR_RATING_LABEL_HEROIC"), $"{heroicRatingCount}"));
+		lines.Add(AccessibleSpeechUtils.CombineWordsWithColon(GameStrings.Get("GLUE_PVPDR_HIGH_WATERMARK_LABEL"), $"{totalRatingCount}"));
+		lines.Add(seasonEndInfo);
+		m_accessibleStats = new AccessibleMultilineText(this, lines);
+		m_accessibleStats.ReadAllLines();
+		m_curState = State.READING_STATS;
+		Log.Accessibility.PrintInfo("I'm now in state READING_STATS in OnReadStats");
+	}
+	private void OnClickPlay()
+	{
+		var btn = m_display.m_playButton;
+		if(!btn.enabled) {
+			AccessibilityMgr.Output(this,GameStrings.Get(btn.m_newPlayButtonText.Text));
+			return;
+		}
+		m_curState = State.LOADING;
+		Log.Accessibility.PrintInfo("I'm now loading in OnClickPlay");
+		btn.TriggerRelease();
+	}
+	private void OnGoBackToHub()
+	{
+		m_curState = State.LOADING;
+		Log.Accessibility.PrintInfo("I'm now loading in DungeonRunScene in OnGoBackToHub");
+		m_display.m_backButton.TriggerRelease();
+	}
+	public void HandleInput()
+	{
+		Log.Accessibility.PrintInfo("m_curAccessibleState: "+m_curState.ToString());
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene in HandleInput");
+		if (m_curState == State.MAIN_MENU)
+		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonRunScene in HandleInput - State.MAIN_MENU");
+			m_currMenu?.HandleAccessibleInput();
+		}
+		else if (m_curState == State.READING_STATS)
+		{
+			Log.Accessibility.PrintInfo("I'm now in DungeonRunScene in HandleInput - State.READING_STATS");
+			if (AccessibleKey.BACK.IsPressed())
+			{
+				ReadMainMenu();
+			}
+			else
+			{
+				m_accessibleStats?.HandleAccessibleInput();
+			}
+		}
+	}
+	public string GetHelp()
+	{
+		if (m_curState == State.MAIN_MENU)
+		{
+			return m_currMenu?.GetHelp();
+		}
+		else if (m_curState == State.READING_STATS)
+		{
+			return AccessibleSpeech.PRESS_BACK_TO_GO_BACK;
+		}
+		return "";
+	}
+	public void OnGainedFocus()
+	{
+		Log.Accessibility.PrintInfo("m_curAccessibleState: "+m_curState.ToString());
+		Log.Accessibility.PrintInfo("I'm now in DungeonRunScene in OnGainedFocus");
+		if (m_curState == State.MAIN_MENU)
+		{
+			m_currMenu?.StartReading();
+		}
+		else if (m_curState == State.READING_STATS)
+		{
+			m_accessibleStats.ReadAllLines();
+		}
+	}
+
+	#endregion
+
 }
