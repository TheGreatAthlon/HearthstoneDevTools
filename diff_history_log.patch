diff --git a/Assembly-CSharp/Accessibility/AccessibleGameplay.cs b/Assembly-CSharp/Accessibility/AccessibleGameplay.cs
index 50bcd15..208c6d0 100644
--- a/Assembly-CSharp/Accessibility/AccessibleGameplay.cs
+++ b/Assembly-CSharp/Accessibility/AccessibleGameplay.cs
@@ -142,6 +142,7 @@ namespace Accessibility
                     var opponentClass = opponent.GetHero().GetClass();
                     var opponentClassName = GameStrings.GetClassName(opponentClass);
                     AccessibilityMgr.Output(this, LocalizationUtils.Format(LocalizationKey.GAMEPLAY_VS_PLAYER_ANNOUNCEMENT, opponentName, opponentClassName));
+                    AccessibleHistoryMgr.Get().AddEntry(LocalizationUtils.Format(LocalizationKey.GAMEPLAY_VS_PLAYER_ANNOUNCEMENT, opponentName, opponentClassName));
                 }
             }
             catch (Exception e)
@@ -184,8 +185,9 @@ namespace Accessibility
                     {
                         var droppedNames = AccessibleSpeechUtils.GetNames(droppedCards);
                         var newNames = AccessibleSpeechUtils.GetNames(newCards);
-
+AccessibleHistoryMgr.Get().AddEntry(LocalizationUtils.Format(LocalizationKey.GAMEPLAY_PLAYER_DISCARDED_CARDS, droppedNames));
                         AccessibilityMgr.Output(this, LocalizationUtils.Format(LocalizationKey.GAMEPLAY_PLAYER_DREW_CARDS, newNames));
+                        AccessibleHistoryMgr.Get().AddEntry(LocalizationUtils.Format(LocalizationKey.GAMEPLAY_PLAYER_DREW_CARDS, newNames));
                     }
                 }
             }
@@ -2104,8 +2106,7 @@ namespace Accessibility
                 m_curPhase = AccessibleGamePhase.PLAYING;
                 IsInBeginningChooseOne = false;
                 m_curState = AccessibleGameState.WAITING;
-                AccessibleHistoryMgr.Get().Reset();
-
+                
                 GameState.Get().RegisterGameOverListener(OnGameOver);
             }
             catch (Exception e)
@@ -2119,8 +2120,14 @@ namespace Accessibility
             m_curPhase = AccessibleGamePhase.GAME_OVER;
 
             AccessibilityMgr.Output(this, GetGameOverMessage(playState));
+            SaveGameHistory();
         }
-
+private void SaveGameHistory() {
+                if (AccessibleGameplayUtils.IsFindingOrPlayingBattlegrounds()) return;
+if(Options.Get().GetBool(Option.ACCESSIBILITY_SAVE_BATTLE_LOGS)) {
+    AccessibleHistoryMgr.Get().SaveToFile(DateTime.Now.ToString("yyyy-M-d H_mm")+" "+GameState.Get().GetFriendlySidePlayer().GetName()+" v "+GameState.Get().GetOpposingSidePlayer().GetName()+".txt");
+    }
+}
         private string GetGameOverMessage(TAG_PLAYSTATE playState)
         {
             switch (playState)
@@ -2196,6 +2203,7 @@ namespace Accessibility
                 m_curPhase = AccessibleGamePhase.PLAYING;
                 IsInBeginningChooseOne = true;
                 m_accessibleChoiceCards.StartReading();
+                AccessibleHistoryMgr.Get().AddEntry(choiceBanner.m_headline.Text+": "+AccessibleSpeechUtils.GetNames(cards));
             }
             catch (Exception e)
             {
diff --git a/Assembly-CSharp/Accessibility/AccessibleHistoryMgr.cs b/Assembly-CSharp/Accessibility/AccessibleHistoryMgr.cs
index ed5a085..ee9c037 100644
--- a/Assembly-CSharp/Accessibility/AccessibleHistoryMgr.cs
+++ b/Assembly-CSharp/Accessibility/AccessibleHistoryMgr.cs
@@ -1,5 +1,7 @@
 ∩╗┐using System;
 using System.Collections.Generic;
+using System.IO;
+using UnityEngine;
 
 namespace Accessibility
 {
@@ -25,16 +27,34 @@ namespace Accessibility
 
         internal void AddEntry(string entry)
         {
-            if (entry == null || entry.Length == 0)
+            if (entry == null || entry.Length == 0||(m_entries.Count>0&&entry==m_entries[m_entries.Count-1]))
             {
                 return;
             }
-
+entry=entry.Replace("\n"," ");
             AccessibilityUtils.LogDebug($"HIST add entry: {entry}");
             m_entries.Add(entry);
         }
 
-        internal void Reset()
+        internal void SaveToFile(string filePath) {
+            if(m_entries.Count==0) return;
+            string battleLogsPath=Application.dataPath+"../../battle logs";
+            var entries=new List<string>(m_entries);
+            for(int i=0; i<entries.Count; i++) {
+                entries[i]=AccessibilityUtils.CurateText(entries[i]);
+            }
+            try {
+                if(!(Directory.Exists(battleLogsPath))) {
+Directory.CreateDirectory(battleLogsPath);
+                }
+                File.WriteAllLines(battleLogsPath+"/"+filePath,entries.ToArray());
+            }
+            catch (Exception e) {
+AccessibilityMgr.Output(null,"An error occurred when saving your battle log. "+e.ToString()+" "+e.Message);
+            }
+        }
+
+            internal void Reset()
         {
             AccessibilityUtils.LogDebug("HIST Reset");
             m_entries.Clear();
diff --git a/Assembly-CSharp/Accessibility/AccessiblePowerTaskListDescriber.cs b/Assembly-CSharp/Accessibility/AccessiblePowerTaskListDescriber.cs
index 7a5feb5..ae96330 100644
--- a/Assembly-CSharp/Accessibility/AccessiblePowerTaskListDescriber.cs
+++ b/Assembly-CSharp/Accessibility/AccessiblePowerTaskListDescriber.cs
@@ -265,6 +265,7 @@ namespace Accessibility
                     if (!AccessibleGameplayUtils.IsPlayingBattlegrounds())
 					{
 						lines.Add(LocalizedText.GAMEPLAY_TURN_ENDED);
+//                        AccessibleHistoryMgr.Get().AddEntry(LocalizedText.GAMEPLAY_TURN_ENDED);
 					}
 
 					OnTurnEnded();
@@ -345,7 +346,7 @@ namespace Accessibility
                 var description = AccessibleInGameState.DescribeDiff(taskList, m_lastDescribedState, newState);
 
                 AddIfNotNull(lines, description);
-                AccessibleHistoryMgr.Get().AddEntry(description);
+                //AccessibleHistoryMgr.Get().AddEntry(description);
             }
 
             var prevState = m_lastDescribedState;
@@ -570,6 +571,7 @@ namespace Accessibility
 
             AccessibilityUtils.LogDebug($"SPS Describing blocked task list: {text}");
             AccessibilityMgr.OutputAndWait(text, OnOutputStart, OnOutputEnd);
+            AccessibleHistoryMgr.Get().AddEntry(text);
         }
 
         private void Output(List<string> lines)
diff --git a/Assembly-CSharp/Accessibility/AccessibleSpeechUtils.cs b/Assembly-CSharp/Accessibility/AccessibleSpeechUtils.cs
index b140fb5..400b739 100644
--- a/Assembly-CSharp/Accessibility/AccessibleSpeechUtils.cs
+++ b/Assembly-CSharp/Accessibility/AccessibleSpeechUtils.cs
@@ -207,13 +207,15 @@ namespace Accessibility
 
                 var curNameCount = nameCounts[name];
 
-                if (curNameCount > 1 && name.Equals(cardString))
+                if (curNameCount > 1)
                 {
-                    sb.Append(LocalizationUtils.Format(LocalizationKey.GAMEPLAY_DIFF_MULTIPLE_ENTITIES, curNameCount, cardStringPlural));
+                    if(name.Equals(cardString)) sb.Append(LocalizationUtils.Format(LocalizationKey.GAMEPLAY_DIFF_MULTIPLE_ENTITIES, curNameCount, cardStringPlural));
+                    else sb.Append(LocalizationUtils.Format(LocalizationKey.GAMEPLAY_DIFF_MULTIPLE_ENTITIES, curNameCount, name));
                 }
                 else
                 {
-                    sb.Append(LocalizationUtils.Format(LocalizationKey.GAMEPLAY_DIFF_MULTIPLE_ENTITIES, curNameCount, name));
+                    if( name.Equals(cardString))                    sb.Append(LocalizationUtils.Format(LocalizationKey.GAMEPLAY_DIFF_MULTIPLE_ENTITIES, curNameCount,  name));
+                    else sb.Append(LocalizationUtils.Format(LocalizationKey.GAMEPLAY_DIFF_MULTIPLE_ENTITIES, "",  name));
                 }
 
                 idx++;
diff --git a/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs b/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs
index d10d865..cfc8f08 100644
--- a/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs
+++ b/Assembly-CSharp/Accessibility/Localization/LocalizationKey.cs
@@ -50,7 +50,8 @@ public class LocalizationKey
     public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_SLOW = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED_SLOW");
     public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_MEDIUM = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED_MEDIUM");
     public static LocalizationKey OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST = CreateKey("ACCESSIBILITY_OPTIONS_MENU_AUTO_ATTACK_SPEED_FAST");
-
+    public static LocalizationKey OPTIONS_MENU_SAVE_BATTLE_LOGS = CreateKey("ACCESSIBILITY_OPTIONS_MENU_SAVE_BATTLE_LOGS");
+    
     // Hub
     public static LocalizationKey HUB_MAIN_MENU_TITLE = CreateKey("ACCESSIBILITY_HUB_MAIN_MENU_TITLE");
     public static LocalizationKey HUB_MAIN_MENU_OPTION_GAME_MENU = CreateKey("ACCESSIBILITY_HUB_MAIN_MENU_OPTION_GAME_MENU");
diff --git a/Assembly-CSharp/ClientOption.cs b/Assembly-CSharp/ClientOption.cs
index 35d9831..5e76604 100644
--- a/Assembly-CSharp/ClientOption.cs
+++ b/Assembly-CSharp/ClientOption.cs
@@ -134,6 +134,7 @@ public enum ClientOption
 	ACCESSIBILITY_GAME_SPEED,
 	ACCESSIBILITY_BACKGROUND_SPEECH,
 	ACCESSIBILITY_AUTO_ATTACK_SPEED,
+	ACCESSIBILITY_SAVE_BATTLE_LOGS,
 	ACCESSIBILITY_BATTLEGROUNDS_NARRATE_ATTACKS,
 	#endregion
 	DEBUG_SHOW_BATTLEGROUND_SKIN_IDS,
diff --git a/Assembly-CSharp/Option.cs b/Assembly-CSharp/Option.cs
index d8d3533..ca71bf2 100644
--- a/Assembly-CSharp/Option.cs
+++ b/Assembly-CSharp/Option.cs
@@ -671,6 +671,8 @@ public enum Option
 	[Description("accessibilityAutoAttackSpeed")]
 	ACCESSIBILITY_AUTO_ATTACK_SPEED,
 	[Description("accessibilityBattlegroundsNarrateAttacks")]
-	ACCESSIBILITY_BATTLEGROUNDS_NARRATE_ATTACKS
+	ACCESSIBILITY_BATTLEGROUNDS_NARRATE_ATTACKS,
+		[Description("accessibilitySaveBattleLogs")]
+	ACCESSIBILITY_SAVE_BATTLE_LOGS
 	#endregion
 }
diff --git a/Assembly-CSharp/OptionDataTables.cs b/Assembly-CSharp/OptionDataTables.cs
index 822198d..b94dc0e 100644
--- a/Assembly-CSharp/OptionDataTables.cs
+++ b/Assembly-CSharp/OptionDataTables.cs
@@ -793,6 +793,10 @@ public class OptionDataTables
 		{
       Option.ACCESSIBILITY_BACKGROUND_SPEECH,
 			typeof(bool)
+    },
+		{
+      Option.ACCESSIBILITY_SAVE_BATTLE_LOGS,
+			typeof(bool)
     },
 		{
       Option.ACCESSIBILITY_AUTO_ATTACK_SPEED,
@@ -1356,6 +1360,10 @@ public class OptionDataTables
 			Option.ACCESSIBILITY_BACKGROUND_SPEECH,
 			true
 	},
+	    {
+			Option.ACCESSIBILITY_SAVE_BATTLE_LOGS,
+			false
+	},
     {
 			Option.ACCESSIBILITY_AUTO_ATTACK_SPEED,
 			1.0f
diff --git a/Assembly-CSharp/OptionsMenu.cs b/Assembly-CSharp/OptionsMenu.cs
index 39c0a71..d315e1a 100644
--- a/Assembly-CSharp/OptionsMenu.cs
+++ b/Assembly-CSharp/OptionsMenu.cs
@@ -722,7 +722,7 @@ private Map<float, string> m_autoAttackSpeeds = new Map<float,string>();
 	private AccessibleDropdownControl m_accessibleFrameRate;
 
 	private AccessibleCheckBox m_speechInBackground;
-
+private AccessibleCheckBox m_saveBattleLogs;
 	private AccessibleCheckBox m_debugLogging;
 
 	private AccessibleCheckBox m_accessibleFullScreen;
@@ -746,6 +746,7 @@ private Map<float, string> m_autoAttackSpeeds = new Map<float,string>();
 		m_accessibleFrameRate = new AccessibleDropdownControl(this, LocalizationUtils.Get(LocalizationKey.OPTIONS_MENU_FRAME_RATE_OPTION), m_graphicsFps, BackToMainMenu);
 
 		m_speechInBackground = new AccessibleCheckBox(this, LocalizationUtils.Get(LocalizationKey.OPTIONS_MENU_SPEECH_IN_BACKGROUND_OPTION), OnToggleSpeechInBackground, GetSpeechinBackgroundState);
+				m_saveBattleLogs = new AccessibleCheckBox(this, LocalizationUtils.Get(LocalizationKey.OPTIONS_MENU_SAVE_BATTLE_LOGS), OnToggleSaveBattleLogs, GetSaveBattleLogsState);
 		m_debugLogging = new AccessibleCheckBox(this, LocalizationUtils.Get(LocalizationKey.OPTIONS_MENU_DEBUG_LOGGING_OPTION), AccessibilityUtils.DebugLoggingToggle, AccessibilityUtils.GetDebugLoggingState);
 		m_accessibleScreenShake = new AccessibleCheckBox(this, LocalizationUtils.Get(LocalizationKey.OPTIONS_MENU_ENABLE_SCREEN_SHAKE_OPTION), m_screenShakeCheckbox);
 		m_accessibleFullScreen = new AccessibleCheckBox(this, LocalizationUtils.Get(LocalizationKey.OPTIONS_MENU_FULLSCREEN_OPTION), m_fullScreenCheckbox);
@@ -765,6 +766,7 @@ foreach(float k in m_autoAttackSpeeds.Keys) {
 		m_accessibleMenu.AddOption(LocalizationUtils.Get(LocalizationKey.SOUND_OPTIONS_MENU_TITLE), m_soundOptionsButton.TriggerRelease);
 		m_accessibleMenu.AddOption(m_speechInBackground.GetText, m_speechInBackground.Toggle);
 		m_accessibleMenu.AddOption(getAutoAttackSpeedText, setAutoAttackSpeed);
+		m_accessibleMenu.AddOption(m_saveBattleLogs.GetText, m_saveBattleLogs.Toggle);
 		m_accessibleMenu.AddOption(m_accessibleGraphicsResolution.GetText, () => OnClickDropdown(m_accessibleGraphicsResolution));
 		m_accessibleMenu.AddOption(m_accessibleGraphicsQuality.GetText, () => OnClickDropdown(m_accessibleGraphicsQuality));
 		m_accessibleMenu.AddOption(m_accessibleFrameRate.GetText, () => OnClickDropdown(m_accessibleFrameRate));
@@ -813,6 +815,17 @@ private void SetAutoAttackSpeed(float speed) {
 	{
 		return Options.Get().GetBool(Option.ACCESSIBILITY_BACKGROUND_SPEECH);
 	}
+	private void OnToggleSaveBattleLogs()
+	{
+				Options.Get().SetBool(Option.ACCESSIBILITY_SAVE_BATTLE_LOGS, !(Options.Get().GetBool(Option.ACCESSIBILITY_SAVE_BATTLE_LOGS)));
+	}
+
+
+	private bool GetSaveBattleLogsState()
+	{
+		return Options.Get().GetBool(Option.ACCESSIBILITY_SAVE_BATTLE_LOGS);
+	}
+
 
 	public void HandleAccessibleInput()
 	{
